{
  "service": {
    "service": "task-processing-backend",
    "serviceObject": {
      "name": "task-processing-backend"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "region": "eu-central-1",
      "httpApi": {
        "cors": {
          "allowedOrigins": [
            "http://localhost:4200"
          ],
          "allowedHeaders": [
            "Content-Type",
            "X-Amz-Date",
            "Authorization",
            "X-Api-Key",
            "X-Amz-Security-Token"
          ],
          "allowedMethods": [
            "GET",
            "POST",
            "OPTIONS"
          ],
          "allowCredentials": false
        }
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "TasksTable",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl",
                "sqs:ReceiveMessage",
                "sqs:DeleteMessage",
                "sqs:ChangeMessageVisibility"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "TasksQueue",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "TasksDeadLetterQueue",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:DescribeStream",
                "dynamodb:ListStreams"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "TasksTable",
                  "StreamArn"
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "WebSocketConnectionsTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::Sub": "${WebSocketConnectionsTable.Arn}/index/*"
                }
              ]
            }
          ]
        }
      },
      "environment": {
        "TASKS_TABLE": "task-processing-backend-dev-table",
        "TASKS_QUEUE_URL": {
          "Ref": "TasksQueue"
        },
        "CONNECTIONS_TABLE": "task-processing-backend-dev-websocket-connections",
        "WEBSOCKET_ENDPOINT": {
          "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
        }
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-processing-backend-dev-api"
            }
          },
          "TaskProcessorLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-processing-backend-dev-taskProcessor"
            }
          },
          "StreamProcessorLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-processing-backend-dev-streamProcessor"
            }
          },
          "DlqMonitorLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-processing-backend-dev-dlqMonitor"
            }
          },
          "WebsocketHandlerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-processing-backend-dev-websocketHandler"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "task-processing-backend",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/task-processing-backend-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/task-processing-backend-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][2]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][3]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][4]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "execute-api:ManageConnections"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:GetRecords",
                          "dynamodb:GetShardIterator",
                          "dynamodb:DescribeStream",
                          "dynamodb:ListStreams"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "TasksTable",
                              "StreamArn"
                            ]
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:ReceiveMessage",
                          "sqs:DeleteMessage",
                          "sqs:GetQueueAttributes"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "TasksQueue",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "task-processing-backend",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "ApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-54517477-9e0a",
                "S3Key": "serverless/task-processing-backend/dev/1756129769295-2025-08-25T13:49:29.295Z/task-processing-backend.zip"
              },
              "Handler": "functions/api/index.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "task-processing-backend-dev-api",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE": "task-processing-backend-dev-table",
                  "TASKS_QUEUE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASKS_QUEUE_URL\"]"
                  },
                  "CONNECTIONS_TABLE": "task-processing-backend-dev-websocket-connections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ApiLogGroup"
            ]
          },
          "TaskProcessorLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-54517477-9e0a",
                "S3Key": "serverless/task-processing-backend/dev/1756129769295-2025-08-25T13:49:29.295Z/task-processing-backend.zip"
              },
              "Handler": "functions/taskProcessor/index.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "task-processing-backend-dev-taskProcessor",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE": "task-processing-backend-dev-table",
                  "TASKS_QUEUE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASKS_QUEUE_URL\"]"
                  },
                  "CONNECTIONS_TABLE": "task-processing-backend-dev-websocket-connections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "TaskProcessorLogGroup"
            ]
          },
          "StreamProcessorLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-54517477-9e0a",
                "S3Key": "serverless/task-processing-backend/dev/1756129769295-2025-08-25T13:49:29.295Z/task-processing-backend.zip"
              },
              "Handler": "functions/streamProcessor/index.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "task-processing-backend-dev-streamProcessor",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE": "task-processing-backend-dev-table",
                  "TASKS_QUEUE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASKS_QUEUE_URL\"]"
                  },
                  "CONNECTIONS_TABLE": "task-processing-backend-dev-websocket-connections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "StreamProcessorLogGroup"
            ]
          },
          "DlqMonitorLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-54517477-9e0a",
                "S3Key": "serverless/task-processing-backend/dev/1756129769295-2025-08-25T13:49:29.295Z/task-processing-backend.zip"
              },
              "Handler": "functions/dlqMonitor/index.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "task-processing-backend-dev-dlqMonitor",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE": "task-processing-backend-dev-table",
                  "TASKS_QUEUE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASKS_QUEUE_URL\"]"
                  },
                  "CONNECTIONS_TABLE": "task-processing-backend-dev-websocket-connections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DlqMonitorLogGroup"
            ]
          },
          "WebsocketHandlerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-54517477-9e0a",
                "S3Key": "serverless/task-processing-backend/dev/1756129769295-2025-08-25T13:49:29.295Z/task-processing-backend.zip"
              },
              "Handler": "functions/websocketHandler/index.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "task-processing-backend-dev-websocketHandler",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE": "task-processing-backend-dev-table",
                  "TASKS_QUEUE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASKS_QUEUE_URL\"]"
                  },
                  "CONNECTIONS_TABLE": "task-processing-backend-dev-websocket-connections",
                  "WEBSOCKET_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"WEBSOCKET_ENDPOINT\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WebsocketHandlerLogGroup"
            ]
          },
          "ApiLambdaVersionvAL4CUTgK5WMuJOYimYYffc0Wrrhx6SCZgjuHM2PI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ApiLambdaFunction"
              },
              "CodeSha256": "nYbnxZ5XhOrFlxXt899RmRr+9c6xOgSxdG/QGWzEBjY="
            }
          },
          "TaskProcessorLambdaVersion57aqbaoJGKIAluMs0UgIx30M45uftoyE5uEDdxtezo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "TaskProcessorLambdaFunction"
              },
              "CodeSha256": "nYbnxZ5XhOrFlxXt899RmRr+9c6xOgSxdG/QGWzEBjY="
            }
          },
          "StreamProcessorLambdaVersion4exsM7tfitUdndi1JGGbSVvBY9AXP1RlIMmShrI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "StreamProcessorLambdaFunction"
              },
              "CodeSha256": "nYbnxZ5XhOrFlxXt899RmRr+9c6xOgSxdG/QGWzEBjY="
            }
          },
          "DlqMonitorLambdaVersion2pMo5ROhFjxeGAD7S2q97bNneV7gSea5WPXX8CX6OI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DlqMonitorLambdaFunction"
              },
              "CodeSha256": "nYbnxZ5XhOrFlxXt899RmRr+9c6xOgSxdG/QGWzEBjY="
            }
          },
          "WebsocketHandlerLambdaVersionw8lTRE9coOj0jFzNl118uelhgFHFoVt3iRj0Hq1DE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WebsocketHandlerLambdaFunction"
              },
              "CodeSha256": "nYbnxZ5XhOrFlxXt899RmRr+9c6xOgSxdG/QGWzEBjY="
            }
          },
          "DlqMonitorEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(5 minutes)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "DlqMonitorLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "dlqMonitorSchedule"
                }
              ]
            }
          },
          "DlqMonitorLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DlqMonitorLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "DlqMonitorEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "WebsocketsApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "task-processing-backend-dev-ws",
              "RouteSelectionExpression": "$request.body.action",
              "Description": "Serverless Websockets",
              "ProtocolType": "WEBSOCKET"
            }
          },
          "WebsocketHandlerWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "WebsocketHandlerLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "WebsocketHandlerLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "WebsocketHandlerLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WebsocketHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "SconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$connect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "WebsocketHandlerWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdisconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$disconnect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "WebsocketHandlerWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdefaultWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$default",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "WebsocketHandlerWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "WebsocketsDeploymentStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "StageName": "dev",
              "Description": "Serverless Websockets",
              "DeploymentId": {
                "Ref": "WebsocketsDeploymentkaylU7JZbCSkwN8TzDYnLVjBMDEGWIRfNx9IKpIRvc"
              }
            }
          },
          "WebsocketsDeploymentkaylU7JZbCSkwN8TzDYnLVjBMDEGWIRfNx9IKpIRvc": {
            "Type": "AWS::ApiGatewayV2::Deployment",
            "DependsOn": [
              "SconnectWebsocketsRoute",
              "SdisconnectWebsocketsRoute",
              "SdefaultWebsocketsRoute"
            ],
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "Description": "Serverless Websockets"
            }
          },
          "StreamProcessorEventSourceMappingDynamodbTasksTable": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 1,
              "Enabled": true,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "TasksTable",
                  "StreamArn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "StreamProcessorLambdaFunction",
                  "Arn"
                ]
              },
              "StartingPosition": "LATEST"
            }
          },
          "TaskProcessorEventSourceMappingSQSTasksQueue": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 1,
              "MaximumBatchingWindowInSeconds": 0,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "TasksQueue",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "TaskProcessorLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-task-processing-backend",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowHeaders": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "AllowMethods": [
                  "GET",
                  "POST",
                  "OPTIONS"
                ],
                "AllowOrigins": [
                  "http://localhost:4200"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "ApiLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationApi": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetTasks": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /tasks",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "HttpApiRoutePostTasks": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /tasks",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "TasksTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "BillingMode": "PAY_PER_REQUEST",
              "TableName": "task-processing-backend-dev-table",
              "StreamSpecification": {
                "StreamViewType": "NEW_AND_OLD_IMAGES"
              },
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ]
            }
          },
          "TasksQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "task-processing-backend-dev-queue",
              "VisibilityTimeout": 30,
              "MessageRetentionPeriod": 1209600,
              "RedrivePolicy": {
                "deadLetterTargetArn": {
                  "Fn::GetAtt": [
                    "TasksDeadLetterQueue",
                    "Arn"
                  ]
                },
                "maxReceiveCount": 3
              }
            }
          },
          "TasksDeadLetterQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "task-processing-backend-dev-dlq",
              "MessageRetentionPeriod": 1209600
            }
          },
          "WebSocketConnectionsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "task-processing-backend-dev-websocket-connections",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "connectionId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "status",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "connectionId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "StatusIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "status",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-eu-central-1-54517477-9e0a",
            "Export": {
              "Name": "sls-task-processing-backend-dev-ServerlessDeploymentBucketName"
            }
          },
          "ApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ApiLambdaVersionvAL4CUTgK5WMuJOYimYYffc0Wrrhx6SCZgjuHM2PI"
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-ApiLambdaFunctionQualifiedArn"
            }
          },
          "TaskProcessorLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "TaskProcessorLambdaVersion57aqbaoJGKIAluMs0UgIx30M45uftoyE5uEDdxtezo"
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-TaskProcessorLambdaFunctionQualifiedArn"
            }
          },
          "StreamProcessorLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "StreamProcessorLambdaVersion4exsM7tfitUdndi1JGGbSVvBY9AXP1RlIMmShrI"
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-StreamProcessorLambdaFunctionQualifiedArn"
            }
          },
          "DlqMonitorLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DlqMonitorLambdaVersion2pMo5ROhFjxeGAD7S2q97bNneV7gSea5WPXX8CX6OI"
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-DlqMonitorLambdaFunctionQualifiedArn"
            }
          },
          "WebsocketHandlerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WebsocketHandlerLambdaVersionw8lTRE9coOj0jFzNl118uelhgFHFoVt3iRj0Hq1DE"
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-WebsocketHandlerLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpointWebsocket": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "wss://",
                  {
                    "Ref": "WebsocketsApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-ServiceEndpointWebsocket"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "api": {
        "handler": "functions/api/index.handler",
        "events": [
          {
            "httpApi": {
              "path": "/tasks",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/tasks"
          },
          {
            "httpApi": {
              "path": "/tasks",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/tasks"
          }
        ],
        "name": "task-processing-backend-dev-api",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "ApiLambdaVersionvAL4CUTgK5WMuJOYimYYffc0Wrrhx6SCZgjuHM2PI"
      },
      "taskProcessor": {
        "handler": "functions/taskProcessor/index.handler",
        "events": [
          {
            "sqs": {
              "arn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"IamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][9][\"Resource\"][0]"
              },
              "batchSize": 1,
              "maximumBatchingWindow": 0
            }
          }
        ],
        "name": "task-processing-backend-dev-taskProcessor",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "TaskProcessorLambdaVersion57aqbaoJGKIAluMs0UgIx30M45uftoyE5uEDdxtezo"
      },
      "streamProcessor": {
        "handler": "functions/streamProcessor/index.handler",
        "events": [
          {
            "stream": {
              "type": "dynamodb",
              "arn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"IamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][8][\"Resource\"][0]"
              },
              "batchSize": 1,
              "startingPosition": "LATEST"
            }
          }
        ],
        "name": "task-processing-backend-dev-streamProcessor",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "StreamProcessorLambdaVersion4exsM7tfitUdndi1JGGbSVvBY9AXP1RlIMmShrI"
      },
      "dlqMonitor": {
        "handler": "functions/dlqMonitor/index.handler",
        "events": [
          {
            "schedule": {
              "rate": [
                "rate(5 minutes)"
              ],
              "enabled": true
            }
          }
        ],
        "name": "task-processing-backend-dev-dlqMonitor",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "DlqMonitorLambdaVersion2pMo5ROhFjxeGAD7S2q97bNneV7gSea5WPXX8CX6OI"
      },
      "websocketHandler": {
        "handler": "functions/websocketHandler/index.handler",
        "events": [
          {
            "websocket": {
              "route": "$connect"
            }
          },
          {
            "websocket": {
              "route": "$disconnect"
            }
          },
          {
            "websocket": {
              "route": "$default"
            }
          }
        ],
        "name": "task-processing-backend-dev-websocketHandler",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "WebsocketHandlerLambdaVersionw8lTRE9coOj0jFzNl118uelhgFHFoVt3iRj0Hq1DE"
      }
    },
    "resources": {
      "Resources": {
        "TasksTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "BillingMode": "PAY_PER_REQUEST",
            "TableName": "task-processing-backend-dev-table",
            "StreamSpecification": {
              "StreamViewType": "NEW_AND_OLD_IMAGES"
            },
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ]
          }
        },
        "TasksQueue": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "task-processing-backend-dev-queue",
            "VisibilityTimeout": 30,
            "MessageRetentionPeriod": 1209600,
            "RedrivePolicy": {
              "deadLetterTargetArn": {
                "Fn::GetAtt": [
                  "TasksDeadLetterQueue",
                  "Arn"
                ]
              },
              "maxReceiveCount": 3
            }
          }
        },
        "TasksDeadLetterQueue": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "task-processing-backend-dev-dlq",
            "MessageRetentionPeriod": 1209600
          }
        },
        "WebSocketConnectionsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "task-processing-backend-dev-websocket-connections",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "connectionId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "status",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "connectionId",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "StatusIndex",
                "KeySchema": [
                  {
                    "AttributeName": "status",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "WebsocketsApi": {
          "Type": "AWS::ApiGatewayV2::Api",
          "Properties": {
            "Name": "task-processing-backend-dev-ws",
            "ProtocolType": "WEBSOCKET",
            "RouteSelectionExpression": "$request.body.action"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless",
    "initialServerlessConfig": {
      "org": "andrewk5o",
      "app": "task-processing",
      "service": "task-processing-backend",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "app": "task-processing",
    "appId": null,
    "org": "andrewk5o",
    "orgId": null,
    "layers": {},
    "artifact": "/Users/andriikliuiko/Desktop/Projects/task-processing/apps/backend/.serverless/task-processing-backend.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/task-processing-backend/dev/1756129769295-2025-08-25T13:49:29.295Z",
    "artifact": "task-processing-backend.zip"
  }
}