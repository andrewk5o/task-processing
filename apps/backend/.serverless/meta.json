{
  "/Users/andriikliuiko/Desktop/Projects/task-processing/apps/backend/serverless.yml": {
    "versionFramework": "4.18.1",
    "servicePath": "/Users/andriikliuiko/Desktop/Projects/task-processing/apps/backend/serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "andrewk5o",
      "app": "task-processing",
      "service": "task-processing-backend",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "region": "eu-central-1",
        "httpApi": {
          "cors": {
            "allowedOrigins": [
              "http://localhost:4200"
            ],
            "allowedHeaders": [
              "Content-Type",
              "X-Amz-Date",
              "Authorization",
              "X-Api-Key",
              "X-Amz-Security-Token"
            ],
            "allowedMethods": [
              "GET",
              "POST",
              "OPTIONS"
            ],
            "allowCredentials": "<REDACTED>"
          }
        },
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:Query",
                  "dynamodb:Scan",
                  "dynamodb:GetItem",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem"
                ],
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "TasksTable",
                      "Arn"
                    ]
                  }
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "sqs:SendMessage",
                  "sqs:GetQueueAttributes",
                  "sqs:GetQueueUrl",
                  "sqs:ReceiveMessage",
                  "sqs:DeleteMessage",
                  "sqs:ChangeMessageVisibility"
                ],
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "TasksQueue",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "TasksDeadLetterQueue",
                      "Arn"
                    ]
                  }
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents",
                  "logs:DescribeLogGroups",
                  "logs:DescribeLogStreams"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:GetRecords",
                  "dynamodb:GetShardIterator",
                  "dynamodb:DescribeStream",
                  "dynamodb:ListStreams"
                ],
                "Resource": {
                  "Fn::GetAtt": [
                    "TasksTable",
                    "StreamArn"
                  ]
                }
              },
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:Query",
                  "dynamodb:Scan",
                  "dynamodb:GetItem",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem"
                ],
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "WebSocketConnectionsTable",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::Sub": "${WebSocketConnectionsTable.Arn}/index/*"
                  }
                ]
              }
            ]
          }
        },
        "environment": {
          "TASKS_TABLE": "task-processing-backend-dev-table",
          "TASKS_QUEUE_URL": {
            "Ref": "TasksQueue"
          },
          "CONNECTIONS_TABLE": "task-processing-backend-dev-websocket-connections",
          "WEBSOCKET_ENDPOINT": {
            "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
          }
        },
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ApiLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/task-processing-backend-dev-api"
              }
            },
            "TaskProcessorLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/task-processing-backend-dev-taskProcessor"
              }
            },
            "StreamProcessorLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/task-processing-backend-dev-streamProcessor"
              }
            },
            "DlqMonitorLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/task-processing-backend-dev-dlqMonitor"
              }
            },
            "WebsocketHandlerLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/task-processing-backend-dev-websocketHandler"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "task-processing-backend",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/task-processing-backend-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/task-processing-backend-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:Query",
                            "dynamodb:Scan",
                            "dynamodb:GetItem",
                            "dynamodb:PutItem",
                            "dynamodb:UpdateItem",
                            "dynamodb:DeleteItem"
                          ],
                          "Resource": [
                            {
                              "Fn::GetAtt": [
                                "TasksTable",
                                "Arn"
                              ]
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "sqs:SendMessage",
                            "sqs:GetQueueAttributes",
                            "sqs:GetQueueUrl",
                            "sqs:ReceiveMessage",
                            "sqs:DeleteMessage",
                            "sqs:ChangeMessageVisibility"
                          ],
                          "Resource": [
                            {
                              "Fn::GetAtt": [
                                "TasksQueue",
                                "Arn"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "TasksDeadLetterQueue",
                                "Arn"
                              ]
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents",
                            "logs:DescribeLogGroups",
                            "logs:DescribeLogStreams"
                          ],
                          "Resource": "*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:GetRecords",
                            "dynamodb:GetShardIterator",
                            "dynamodb:DescribeStream",
                            "dynamodb:ListStreams"
                          ],
                          "Resource": {
                            "Fn::GetAtt": [
                              "TasksTable",
                              "StreamArn"
                            ]
                          }
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:Query",
                            "dynamodb:Scan",
                            "dynamodb:GetItem",
                            "dynamodb:PutItem",
                            "dynamodb:UpdateItem",
                            "dynamodb:DeleteItem"
                          ],
                          "Resource": [
                            {
                              "Fn::GetAtt": [
                                "WebSocketConnectionsTable",
                                "Arn"
                              ]
                            },
                            {
                              "Fn::Sub": "${WebSocketConnectionsTable.Arn}/index/*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "execute-api:ManageConnections"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:GetRecords",
                            "dynamodb:GetShardIterator",
                            "dynamodb:DescribeStream",
                            "dynamodb:ListStreams"
                          ],
                          "Resource": [
                            {
                              "Fn::GetAtt": [
                                "TasksTable",
                                "StreamArn"
                              ]
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "sqs:ReceiveMessage",
                            "sqs:DeleteMessage",
                            "sqs:GetQueueAttributes"
                          ],
                          "Resource": [
                            {
                              "Fn::GetAtt": [
                                "TasksQueue",
                                "Arn"
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "task-processing-backend",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "ApiLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-54517477-9e0a",
                  "S3Key": "serverless/task-processing-backend/dev/1756131165037-2025-08-25T14:12:45.037Z/task-processing-backend.zip"
                },
                "Handler": "functions/api/index.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "task-processing-backend-dev-api",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TASKS_TABLE": "task-processing-backend-dev-table",
                    "TASKS_QUEUE_URL": {
                      "Ref": "TasksQueue"
                    },
                    "CONNECTIONS_TABLE": "task-processing-backend-dev-websocket-connections",
                    "WEBSOCKET_ENDPOINT": {
                      "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
                    }
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ApiLogGroup"
              ]
            },
            "TaskProcessorLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-54517477-9e0a",
                  "S3Key": "serverless/task-processing-backend/dev/1756131165037-2025-08-25T14:12:45.037Z/task-processing-backend.zip"
                },
                "Handler": "functions/taskProcessor/index.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "task-processing-backend-dev-taskProcessor",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TASKS_TABLE": "task-processing-backend-dev-table",
                    "TASKS_QUEUE_URL": {
                      "Ref": "TasksQueue"
                    },
                    "CONNECTIONS_TABLE": "task-processing-backend-dev-websocket-connections",
                    "WEBSOCKET_ENDPOINT": {
                      "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
                    }
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "TaskProcessorLogGroup"
              ]
            },
            "StreamProcessorLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-54517477-9e0a",
                  "S3Key": "serverless/task-processing-backend/dev/1756131165037-2025-08-25T14:12:45.037Z/task-processing-backend.zip"
                },
                "Handler": "functions/streamProcessor/index.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "task-processing-backend-dev-streamProcessor",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TASKS_TABLE": "task-processing-backend-dev-table",
                    "TASKS_QUEUE_URL": {
                      "Ref": "TasksQueue"
                    },
                    "CONNECTIONS_TABLE": "task-processing-backend-dev-websocket-connections",
                    "WEBSOCKET_ENDPOINT": {
                      "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
                    }
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "StreamProcessorLogGroup"
              ]
            },
            "DlqMonitorLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-54517477-9e0a",
                  "S3Key": "serverless/task-processing-backend/dev/1756131165037-2025-08-25T14:12:45.037Z/task-processing-backend.zip"
                },
                "Handler": "functions/dlqMonitor/index.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "task-processing-backend-dev-dlqMonitor",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TASKS_TABLE": "task-processing-backend-dev-table",
                    "TASKS_QUEUE_URL": {
                      "Ref": "TasksQueue"
                    },
                    "CONNECTIONS_TABLE": "task-processing-backend-dev-websocket-connections",
                    "WEBSOCKET_ENDPOINT": {
                      "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
                    }
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DlqMonitorLogGroup"
              ]
            },
            "WebsocketHandlerLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-54517477-9e0a",
                  "S3Key": "serverless/task-processing-backend/dev/1756131165037-2025-08-25T14:12:45.037Z/task-processing-backend.zip"
                },
                "Handler": "functions/websocketHandler/index.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "task-processing-backend-dev-websocketHandler",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TASKS_TABLE": "task-processing-backend-dev-table",
                    "TASKS_QUEUE_URL": {
                      "Ref": "TasksQueue"
                    },
                    "CONNECTIONS_TABLE": "task-processing-backend-dev-websocket-connections",
                    "WEBSOCKET_ENDPOINT": {
                      "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
                    }
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "WebsocketHandlerLogGroup"
              ]
            },
            "ApiLambdaVersionvAL4CUTgK5WMuJOYimYYffc0Wrrhx6SCZgjuHM2PI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ApiLambdaFunction"
                },
                "CodeSha256": "nYbnxZ5XhOrFlxXt899RmRr+9c6xOgSxdG/QGWzEBjY="
              }
            },
            "TaskProcessorLambdaVersion57aqbaoJGKIAluMs0UgIx30M45uftoyE5uEDdxtezo": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "TaskProcessorLambdaFunction"
                },
                "CodeSha256": "nYbnxZ5XhOrFlxXt899RmRr+9c6xOgSxdG/QGWzEBjY="
              }
            },
            "StreamProcessorLambdaVersion4exsM7tfitUdndi1JGGbSVvBY9AXP1RlIMmShrI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "StreamProcessorLambdaFunction"
                },
                "CodeSha256": "nYbnxZ5XhOrFlxXt899RmRr+9c6xOgSxdG/QGWzEBjY="
              }
            },
            "DlqMonitorLambdaVersion2pMo5ROhFjxeGAD7S2q97bNneV7gSea5WPXX8CX6OI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DlqMonitorLambdaFunction"
                },
                "CodeSha256": "nYbnxZ5XhOrFlxXt899RmRr+9c6xOgSxdG/QGWzEBjY="
              }
            },
            "WebsocketHandlerLambdaVersionw8lTRE9coOj0jFzNl118uelhgFHFoVt3iRj0Hq1DE": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "WebsocketHandlerLambdaFunction"
                },
                "CodeSha256": "nYbnxZ5XhOrFlxXt899RmRr+9c6xOgSxdG/QGWzEBjY="
              }
            },
            "DlqMonitorEventsRuleSchedule1": {
              "Type": "AWS::Events::Rule",
              "Properties": {
                "ScheduleExpression": "rate(5 minutes)",
                "State": "ENABLED",
                "Targets": [
                  {
                    "Arn": {
                      "Fn::GetAtt": [
                        "DlqMonitorLambdaFunction",
                        "Arn"
                      ]
                    },
                    "Id": "dlqMonitorSchedule"
                  }
                ]
              }
            },
            "DlqMonitorLambdaPermissionEventsRuleSchedule1": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DlqMonitorLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                  "Fn::GetAtt": [
                    "DlqMonitorEventsRuleSchedule1",
                    "Arn"
                  ]
                }
              }
            },
            "WebsocketsApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "task-processing-backend-dev-ws",
                "RouteSelectionExpression": "$request.body.action",
                "Description": "Serverless Websockets",
                "ProtocolType": "WEBSOCKET"
              }
            },
            "WebsocketHandlerWebsocketsIntegration": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "WebsocketsApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WebsocketHandlerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              }
            },
            "WebsocketHandlerLambdaPermissionWebsockets": {
              "Type": "AWS::Lambda::Permission",
              "DependsOn": [
                "WebsocketsApi",
                "WebsocketHandlerLambdaFunction"
              ],
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "WebsocketHandlerLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com"
              }
            },
            "SconnectWebsocketsRoute": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "WebsocketsApi"
                },
                "RouteKey": "$connect",
                "AuthorizationType": "NONE",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "WebsocketHandlerWebsocketsIntegration"
                      }
                    ]
                  ]
                }
              }
            },
            "SdisconnectWebsocketsRoute": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "WebsocketsApi"
                },
                "RouteKey": "$disconnect",
                "AuthorizationType": "NONE",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "WebsocketHandlerWebsocketsIntegration"
                      }
                    ]
                  ]
                }
              }
            },
            "SdefaultWebsocketsRoute": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "WebsocketsApi"
                },
                "RouteKey": "$default",
                "AuthorizationType": "NONE",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "WebsocketHandlerWebsocketsIntegration"
                      }
                    ]
                  ]
                }
              }
            },
            "WebsocketsDeploymentStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "WebsocketsApi"
                },
                "StageName": "dev",
                "Description": "Serverless Websockets",
                "DeploymentId": {
                  "Ref": "WebsocketsDeploymentkaylU7JZbCSkwN8TzDYnLVjBMDEGWIRfNx9IKpIRvc"
                }
              }
            },
            "WebsocketsDeploymentkaylU7JZbCSkwN8TzDYnLVjBMDEGWIRfNx9IKpIRvc": {
              "Type": "AWS::ApiGatewayV2::Deployment",
              "DependsOn": [
                "SconnectWebsocketsRoute",
                "SdisconnectWebsocketsRoute",
                "SdefaultWebsocketsRoute"
              ],
              "Properties": {
                "ApiId": {
                  "Ref": "WebsocketsApi"
                },
                "Description": "Serverless Websockets"
              }
            },
            "StreamProcessorEventSourceMappingDynamodbTasksTable": {
              "Type": "AWS::Lambda::EventSourceMapping",
              "DependsOn": [
                "IamRoleLambdaExecution"
              ],
              "Properties": {
                "BatchSize": 1,
                "Enabled": true,
                "EventSourceArn": {
                  "Fn::GetAtt": [
                    "TasksTable",
                    "StreamArn"
                  ]
                },
                "FunctionName": {
                  "Fn::GetAtt": [
                    "StreamProcessorLambdaFunction",
                    "Arn"
                  ]
                },
                "StartingPosition": "LATEST"
              }
            },
            "TaskProcessorEventSourceMappingSQSTasksQueue": {
              "Type": "AWS::Lambda::EventSourceMapping",
              "DependsOn": [
                "IamRoleLambdaExecution"
              ],
              "Properties": {
                "BatchSize": 1,
                "MaximumBatchingWindowInSeconds": 0,
                "EventSourceArn": {
                  "Fn::GetAtt": [
                    "TasksQueue",
                    "Arn"
                  ]
                },
                "FunctionName": {
                  "Fn::GetAtt": [
                    "TaskProcessorLambdaFunction",
                    "Arn"
                  ]
                },
                "Enabled": true
              }
            },
            "HttpApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "dev-task-processing-backend",
                "ProtocolType": "HTTP",
                "CorsConfiguration": {
                  "AllowCredentials": "<REDACTED>",
                  "AllowHeaders": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token"
                  ],
                  "AllowMethods": [
                    "GET",
                    "POST",
                    "OPTIONS"
                  ],
                  "AllowOrigins": [
                    "http://localhost:4200"
                  ]
                }
              }
            },
            "HttpApiStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true,
                "DefaultRouteSettings": {
                  "DetailedMetricsEnabled": false
                }
              }
            },
            "ApiLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationApi": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetTasks": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /tasks",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationApi"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationApi"
            },
            "HttpApiRoutePostTasks": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /tasks",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationApi"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationApi"
            },
            "TasksTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "BillingMode": "PAY_PER_REQUEST",
                "TableName": "task-processing-backend-dev-table",
                "StreamSpecification": {
                  "StreamViewType": "NEW_AND_OLD_IMAGES"
                },
                "AttributeDefinitions": [
                  {
                    "AttributeName": "id",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "id",
                    "KeyType": "HASH"
                  }
                ]
              }
            },
            "TasksQueue": {
              "Type": "AWS::SQS::Queue",
              "Properties": {
                "QueueName": "task-processing-backend-dev-queue",
                "VisibilityTimeout": 30,
                "MessageRetentionPeriod": 1209600,
                "RedrivePolicy": {
                  "deadLetterTargetArn": {
                    "Fn::GetAtt": [
                      "TasksDeadLetterQueue",
                      "Arn"
                    ]
                  },
                  "maxReceiveCount": 3
                }
              }
            },
            "TasksDeadLetterQueue": {
              "Type": "AWS::SQS::Queue",
              "Properties": {
                "QueueName": "task-processing-backend-dev-dlq",
                "MessageRetentionPeriod": 1209600
              }
            },
            "WebSocketConnectionsTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "task-processing-backend-dev-websocket-connections",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "connectionId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "status",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "connectionId",
                    "KeyType": "HASH"
                  }
                ],
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "StatusIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "status",
                        "KeyType": "HASH"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  }
                ]
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-eu-central-1-54517477-9e0a",
              "Export": {
                "Name": "sls-task-processing-backend-dev-ServerlessDeploymentBucketName"
              }
            },
            "ApiLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ApiLambdaVersionvAL4CUTgK5WMuJOYimYYffc0Wrrhx6SCZgjuHM2PI"
              },
              "Export": {
                "Name": "sls-task-processing-backend-dev-ApiLambdaFunctionQualifiedArn"
              }
            },
            "TaskProcessorLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "TaskProcessorLambdaVersion57aqbaoJGKIAluMs0UgIx30M45uftoyE5uEDdxtezo"
              },
              "Export": {
                "Name": "sls-task-processing-backend-dev-TaskProcessorLambdaFunctionQualifiedArn"
              }
            },
            "StreamProcessorLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "StreamProcessorLambdaVersion4exsM7tfitUdndi1JGGbSVvBY9AXP1RlIMmShrI"
              },
              "Export": {
                "Name": "sls-task-processing-backend-dev-StreamProcessorLambdaFunctionQualifiedArn"
              }
            },
            "DlqMonitorLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DlqMonitorLambdaVersion2pMo5ROhFjxeGAD7S2q97bNneV7gSea5WPXX8CX6OI"
              },
              "Export": {
                "Name": "sls-task-processing-backend-dev-DlqMonitorLambdaFunctionQualifiedArn"
              }
            },
            "WebsocketHandlerLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "WebsocketHandlerLambdaVersionw8lTRE9coOj0jFzNl118uelhgFHFoVt3iRj0Hq1DE"
              },
              "Export": {
                "Name": "sls-task-processing-backend-dev-WebsocketHandlerLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpointWebsocket": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "wss://",
                    {
                      "Ref": "WebsocketsApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-task-processing-backend-dev-ServiceEndpointWebsocket"
              }
            },
            "HttpApiId": {
              "Description": "Id of the HTTP API",
              "Value": {
                "Ref": "HttpApi"
              },
              "Export": {
                "Name": "sls-task-processing-backend-dev-HttpApiId"
              }
            },
            "HttpApiUrl": {
              "Description": "URL of the HTTP API",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "HttpApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Export": {
                "Name": "sls-task-processing-backend-dev-HttpApiUrl"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "api": {
          "handler": "functions/api/index.handler",
          "events": [
            {
              "httpApi": {
                "path": "/tasks",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/tasks"
            },
            {
              "httpApi": {
                "path": "/tasks",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/tasks"
            }
          ],
          "name": "task-processing-backend-dev-api",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ApiLambdaVersionvAL4CUTgK5WMuJOYimYYffc0Wrrhx6SCZgjuHM2PI"
        },
        "taskProcessor": {
          "handler": "functions/taskProcessor/index.handler",
          "events": [
            {
              "sqs": {
                "arn": {
                  "Fn::GetAtt": [
                    "TasksQueue",
                    "Arn"
                  ]
                },
                "batchSize": 1,
                "maximumBatchingWindow": 0
              }
            }
          ],
          "name": "task-processing-backend-dev-taskProcessor",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "TaskProcessorLambdaVersion57aqbaoJGKIAluMs0UgIx30M45uftoyE5uEDdxtezo"
        },
        "streamProcessor": {
          "handler": "functions/streamProcessor/index.handler",
          "events": [
            {
              "stream": {
                "type": "dynamodb",
                "arn": {
                  "Fn::GetAtt": [
                    "TasksTable",
                    "StreamArn"
                  ]
                },
                "batchSize": 1,
                "startingPosition": "LATEST"
              }
            }
          ],
          "name": "task-processing-backend-dev-streamProcessor",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "StreamProcessorLambdaVersion4exsM7tfitUdndi1JGGbSVvBY9AXP1RlIMmShrI"
        },
        "dlqMonitor": {
          "handler": "functions/dlqMonitor/index.handler",
          "events": [
            {
              "schedule": {
                "rate": [
                  "rate(5 minutes)"
                ],
                "enabled": true
              }
            }
          ],
          "name": "task-processing-backend-dev-dlqMonitor",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "DlqMonitorLambdaVersion2pMo5ROhFjxeGAD7S2q97bNneV7gSea5WPXX8CX6OI"
        },
        "websocketHandler": {
          "handler": "functions/websocketHandler/index.handler",
          "events": [
            {
              "websocket": {
                "route": "$connect"
              }
            },
            {
              "websocket": {
                "route": "$disconnect"
              }
            },
            {
              "websocket": {
                "route": "$default"
              }
            }
          ],
          "name": "task-processing-backend-dev-websocketHandler",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "WebsocketHandlerLambdaVersionw8lTRE9coOj0jFzNl118uelhgFHFoVt3iRj0Hq1DE"
        }
      },
      "resources": {
        "Resources": {
          "TasksTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "BillingMode": "PAY_PER_REQUEST",
              "TableName": "task-processing-backend-dev-table",
              "StreamSpecification": {
                "StreamViewType": "NEW_AND_OLD_IMAGES"
              },
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ]
            }
          },
          "TasksQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "task-processing-backend-dev-queue",
              "VisibilityTimeout": 30,
              "MessageRetentionPeriod": 1209600,
              "RedrivePolicy": {
                "deadLetterTargetArn": {
                  "Fn::GetAtt": [
                    "TasksDeadLetterQueue",
                    "Arn"
                  ]
                },
                "maxReceiveCount": 3
              }
            }
          },
          "TasksDeadLetterQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "task-processing-backend-dev-dlq",
              "MessageRetentionPeriod": 1209600
            }
          },
          "WebSocketConnectionsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "task-processing-backend-dev-websocket-connections",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "connectionId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "status",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "connectionId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "StatusIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "status",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "WebsocketsApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "task-processing-backend-dev-ws",
              "ProtocolType": "WEBSOCKET",
              "RouteSelectionExpression": "$request.body.action"
            }
          }
        },
        "Outputs": {}
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "region": "eu-central-1",
      "httpApi": {
        "cors": {
          "allowedOrigins": [
            "http://localhost:4200"
          ],
          "allowedHeaders": [
            "Content-Type",
            "X-Amz-Date",
            "Authorization",
            "X-Api-Key",
            "X-Amz-Security-Token"
          ],
          "allowedMethods": [
            "GET",
            "POST",
            "OPTIONS"
          ],
          "allowCredentials": "<REDACTED>"
        }
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "TasksTable",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl",
                "sqs:ReceiveMessage",
                "sqs:DeleteMessage",
                "sqs:ChangeMessageVisibility"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "TasksQueue",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "TasksDeadLetterQueue",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:DescribeStream",
                "dynamodb:ListStreams"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "TasksTable",
                  "StreamArn"
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "WebSocketConnectionsTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::Sub": "${WebSocketConnectionsTable.Arn}/index/*"
                }
              ]
            }
          ]
        }
      },
      "environment": {
        "TASKS_TABLE": "task-processing-backend-dev-table",
        "TASKS_QUEUE_URL": {
          "Ref": "TasksQueue"
        },
        "CONNECTIONS_TABLE": "task-processing-backend-dev-websocket-connections",
        "WEBSOCKET_ENDPOINT": {
          "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
        }
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-processing-backend-dev-api"
            }
          },
          "TaskProcessorLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-processing-backend-dev-taskProcessor"
            }
          },
          "StreamProcessorLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-processing-backend-dev-streamProcessor"
            }
          },
          "DlqMonitorLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-processing-backend-dev-dlqMonitor"
            }
          },
          "WebsocketHandlerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-processing-backend-dev-websocketHandler"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "task-processing-backend",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/task-processing-backend-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/task-processing-backend-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:Query",
                          "dynamodb:Scan",
                          "dynamodb:GetItem",
                          "dynamodb:PutItem",
                          "dynamodb:UpdateItem",
                          "dynamodb:DeleteItem"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "TasksTable",
                              "Arn"
                            ]
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:SendMessage",
                          "sqs:GetQueueAttributes",
                          "sqs:GetQueueUrl",
                          "sqs:ReceiveMessage",
                          "sqs:DeleteMessage",
                          "sqs:ChangeMessageVisibility"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "TasksQueue",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "TasksDeadLetterQueue",
                              "Arn"
                            ]
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents",
                          "logs:DescribeLogGroups",
                          "logs:DescribeLogStreams"
                        ],
                        "Resource": "*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:GetRecords",
                          "dynamodb:GetShardIterator",
                          "dynamodb:DescribeStream",
                          "dynamodb:ListStreams"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "TasksTable",
                            "StreamArn"
                          ]
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:Query",
                          "dynamodb:Scan",
                          "dynamodb:GetItem",
                          "dynamodb:PutItem",
                          "dynamodb:UpdateItem",
                          "dynamodb:DeleteItem"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "WebSocketConnectionsTable",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::Sub": "${WebSocketConnectionsTable.Arn}/index/*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "execute-api:ManageConnections"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:GetRecords",
                          "dynamodb:GetShardIterator",
                          "dynamodb:DescribeStream",
                          "dynamodb:ListStreams"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "TasksTable",
                              "StreamArn"
                            ]
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:ReceiveMessage",
                          "sqs:DeleteMessage",
                          "sqs:GetQueueAttributes"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "TasksQueue",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "task-processing-backend",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "ApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-54517477-9e0a",
                "S3Key": "serverless/task-processing-backend/dev/1756131165037-2025-08-25T14:12:45.037Z/task-processing-backend.zip"
              },
              "Handler": "functions/api/index.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "task-processing-backend-dev-api",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE": "task-processing-backend-dev-table",
                  "TASKS_QUEUE_URL": {
                    "Ref": "TasksQueue"
                  },
                  "CONNECTIONS_TABLE": "task-processing-backend-dev-websocket-connections",
                  "WEBSOCKET_ENDPOINT": {
                    "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ApiLogGroup"
            ]
          },
          "TaskProcessorLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-54517477-9e0a",
                "S3Key": "serverless/task-processing-backend/dev/1756131165037-2025-08-25T14:12:45.037Z/task-processing-backend.zip"
              },
              "Handler": "functions/taskProcessor/index.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "task-processing-backend-dev-taskProcessor",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE": "task-processing-backend-dev-table",
                  "TASKS_QUEUE_URL": {
                    "Ref": "TasksQueue"
                  },
                  "CONNECTIONS_TABLE": "task-processing-backend-dev-websocket-connections",
                  "WEBSOCKET_ENDPOINT": {
                    "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "TaskProcessorLogGroup"
            ]
          },
          "StreamProcessorLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-54517477-9e0a",
                "S3Key": "serverless/task-processing-backend/dev/1756131165037-2025-08-25T14:12:45.037Z/task-processing-backend.zip"
              },
              "Handler": "functions/streamProcessor/index.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "task-processing-backend-dev-streamProcessor",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE": "task-processing-backend-dev-table",
                  "TASKS_QUEUE_URL": {
                    "Ref": "TasksQueue"
                  },
                  "CONNECTIONS_TABLE": "task-processing-backend-dev-websocket-connections",
                  "WEBSOCKET_ENDPOINT": {
                    "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "StreamProcessorLogGroup"
            ]
          },
          "DlqMonitorLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-54517477-9e0a",
                "S3Key": "serverless/task-processing-backend/dev/1756131165037-2025-08-25T14:12:45.037Z/task-processing-backend.zip"
              },
              "Handler": "functions/dlqMonitor/index.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "task-processing-backend-dev-dlqMonitor",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE": "task-processing-backend-dev-table",
                  "TASKS_QUEUE_URL": {
                    "Ref": "TasksQueue"
                  },
                  "CONNECTIONS_TABLE": "task-processing-backend-dev-websocket-connections",
                  "WEBSOCKET_ENDPOINT": {
                    "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DlqMonitorLogGroup"
            ]
          },
          "WebsocketHandlerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-54517477-9e0a",
                "S3Key": "serverless/task-processing-backend/dev/1756131165037-2025-08-25T14:12:45.037Z/task-processing-backend.zip"
              },
              "Handler": "functions/websocketHandler/index.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "task-processing-backend-dev-websocketHandler",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE": "task-processing-backend-dev-table",
                  "TASKS_QUEUE_URL": {
                    "Ref": "TasksQueue"
                  },
                  "CONNECTIONS_TABLE": "task-processing-backend-dev-websocket-connections",
                  "WEBSOCKET_ENDPOINT": {
                    "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WebsocketHandlerLogGroup"
            ]
          },
          "ApiLambdaVersionvAL4CUTgK5WMuJOYimYYffc0Wrrhx6SCZgjuHM2PI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ApiLambdaFunction"
              },
              "CodeSha256": "nYbnxZ5XhOrFlxXt899RmRr+9c6xOgSxdG/QGWzEBjY="
            }
          },
          "TaskProcessorLambdaVersion57aqbaoJGKIAluMs0UgIx30M45uftoyE5uEDdxtezo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "TaskProcessorLambdaFunction"
              },
              "CodeSha256": "nYbnxZ5XhOrFlxXt899RmRr+9c6xOgSxdG/QGWzEBjY="
            }
          },
          "StreamProcessorLambdaVersion4exsM7tfitUdndi1JGGbSVvBY9AXP1RlIMmShrI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "StreamProcessorLambdaFunction"
              },
              "CodeSha256": "nYbnxZ5XhOrFlxXt899RmRr+9c6xOgSxdG/QGWzEBjY="
            }
          },
          "DlqMonitorLambdaVersion2pMo5ROhFjxeGAD7S2q97bNneV7gSea5WPXX8CX6OI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DlqMonitorLambdaFunction"
              },
              "CodeSha256": "nYbnxZ5XhOrFlxXt899RmRr+9c6xOgSxdG/QGWzEBjY="
            }
          },
          "WebsocketHandlerLambdaVersionw8lTRE9coOj0jFzNl118uelhgFHFoVt3iRj0Hq1DE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WebsocketHandlerLambdaFunction"
              },
              "CodeSha256": "nYbnxZ5XhOrFlxXt899RmRr+9c6xOgSxdG/QGWzEBjY="
            }
          },
          "DlqMonitorEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(5 minutes)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "DlqMonitorLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "dlqMonitorSchedule"
                }
              ]
            }
          },
          "DlqMonitorLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DlqMonitorLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "DlqMonitorEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "WebsocketsApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "task-processing-backend-dev-ws",
              "RouteSelectionExpression": "$request.body.action",
              "Description": "Serverless Websockets",
              "ProtocolType": "WEBSOCKET"
            }
          },
          "WebsocketHandlerWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "WebsocketHandlerLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "WebsocketHandlerLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "WebsocketHandlerLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WebsocketHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "SconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$connect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "WebsocketHandlerWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdisconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$disconnect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "WebsocketHandlerWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdefaultWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$default",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "WebsocketHandlerWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "WebsocketsDeploymentStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "StageName": "dev",
              "Description": "Serverless Websockets",
              "DeploymentId": {
                "Ref": "WebsocketsDeploymentkaylU7JZbCSkwN8TzDYnLVjBMDEGWIRfNx9IKpIRvc"
              }
            }
          },
          "WebsocketsDeploymentkaylU7JZbCSkwN8TzDYnLVjBMDEGWIRfNx9IKpIRvc": {
            "Type": "AWS::ApiGatewayV2::Deployment",
            "DependsOn": [
              "SconnectWebsocketsRoute",
              "SdisconnectWebsocketsRoute",
              "SdefaultWebsocketsRoute"
            ],
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "Description": "Serverless Websockets"
            }
          },
          "StreamProcessorEventSourceMappingDynamodbTasksTable": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 1,
              "Enabled": true,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "TasksTable",
                  "StreamArn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "StreamProcessorLambdaFunction",
                  "Arn"
                ]
              },
              "StartingPosition": "LATEST"
            }
          },
          "TaskProcessorEventSourceMappingSQSTasksQueue": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 1,
              "MaximumBatchingWindowInSeconds": 0,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "TasksQueue",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "TaskProcessorLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-task-processing-backend",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowCredentials": "<REDACTED>",
                "AllowHeaders": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "AllowMethods": [
                  "GET",
                  "POST",
                  "OPTIONS"
                ],
                "AllowOrigins": [
                  "http://localhost:4200"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "ApiLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationApi": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ApiLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetTasks": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /tasks",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "HttpApiRoutePostTasks": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /tasks",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "TasksTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "BillingMode": "PAY_PER_REQUEST",
              "TableName": "task-processing-backend-dev-table",
              "StreamSpecification": {
                "StreamViewType": "NEW_AND_OLD_IMAGES"
              },
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ]
            }
          },
          "TasksQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "task-processing-backend-dev-queue",
              "VisibilityTimeout": 30,
              "MessageRetentionPeriod": 1209600,
              "RedrivePolicy": {
                "deadLetterTargetArn": {
                  "Fn::GetAtt": [
                    "TasksDeadLetterQueue",
                    "Arn"
                  ]
                },
                "maxReceiveCount": 3
              }
            }
          },
          "TasksDeadLetterQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "task-processing-backend-dev-dlq",
              "MessageRetentionPeriod": 1209600
            }
          },
          "WebSocketConnectionsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "task-processing-backend-dev-websocket-connections",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "connectionId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "status",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "connectionId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "StatusIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "status",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-eu-central-1-54517477-9e0a",
            "Export": {
              "Name": "sls-task-processing-backend-dev-ServerlessDeploymentBucketName"
            }
          },
          "ApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ApiLambdaVersionvAL4CUTgK5WMuJOYimYYffc0Wrrhx6SCZgjuHM2PI"
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-ApiLambdaFunctionQualifiedArn"
            }
          },
          "TaskProcessorLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "TaskProcessorLambdaVersion57aqbaoJGKIAluMs0UgIx30M45uftoyE5uEDdxtezo"
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-TaskProcessorLambdaFunctionQualifiedArn"
            }
          },
          "StreamProcessorLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "StreamProcessorLambdaVersion4exsM7tfitUdndi1JGGbSVvBY9AXP1RlIMmShrI"
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-StreamProcessorLambdaFunctionQualifiedArn"
            }
          },
          "DlqMonitorLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DlqMonitorLambdaVersion2pMo5ROhFjxeGAD7S2q97bNneV7gSea5WPXX8CX6OI"
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-DlqMonitorLambdaFunctionQualifiedArn"
            }
          },
          "WebsocketHandlerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WebsocketHandlerLambdaVersionw8lTRE9coOj0jFzNl118uelhgFHFoVt3iRj0Hq1DE"
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-WebsocketHandlerLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpointWebsocket": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "wss://",
                  {
                    "Ref": "WebsocketsApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-ServiceEndpointWebsocket"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-task-processing-backend-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": true,
      "requiredAuthentication": false,
      "orgFeaturesInUse": {
        "providers": true,
        "monitoring": true
      },
      "orgObservabilityIntegrations": [
        {
          "integrationId": "oJdKQagvGtLEo2SytTKFa4",
          "awsAccountId": "085089485325",
          "status": "alive"
        }
      ],
      "serviceAppId": "fWVrLq7M0jppR2ssVh",
      "serviceProvider": {
        "accessKeyId": "<REDACTED>",
        "secretAccessKey": "<REDACTED>",
        "sessionToken": "<REDACTED>",
        "$source": {
          "CREDENTIALS_CODE": "<REDACTED>"
        }
      },
      "instanceParameters": null
    },
    "serviceRawFile": "# Backend Serverless Framework configuration for task-processing service\norg: andrewk5o\napp: task-processing\nservice: task-processing-backend\n\n# Stage-specific configuration\nprovider:\n  name: aws\n  runtime: nodejs20.x\n  region: eu-central-1\n\n  httpApi:\n    cors:\n      allowedOrigins:\n        - http://localhost:4200\n      allowedHeaders:\n        - Content-Type\n        - X-Amz-Date\n        - Authorization\n        - X-Api-Key\n        - X-Amz-Security-Token\n      allowedMethods:\n        - GET\n        - POST\n        - OPTIONS\n      allowCredentials: false\n\n  # IAM permissions for the service\n  iam:\n    role:\n      statements:\n        # DynamoDB permissions\n        - Effect: Allow\n          Action:\n            - dynamodb:Query\n            - dynamodb:Scan\n            - dynamodb:GetItem\n            - dynamodb:PutItem\n            - dynamodb:UpdateItem\n            - dynamodb:DeleteItem\n          Resource:\n            - Fn::GetAtt: [TasksTable, Arn]\n\n        # SQS permissions for main queue and DLQ\n        - Effect: Allow\n          Action:\n            - sqs:SendMessage\n            - sqs:GetQueueAttributes\n            - sqs:GetQueueUrl\n            - sqs:ReceiveMessage\n            - sqs:DeleteMessage\n            - sqs:ChangeMessageVisibility\n          Resource:\n            - Fn::GetAtt: [TasksQueue, Arn]\n            - Fn::GetAtt: [TasksDeadLetterQueue, Arn]\n\n        # CloudWatch Logs permissions for DLQ monitoring\n        - Effect: Allow\n          Action:\n            - logs:CreateLogGroup\n            - logs:CreateLogStream\n            - logs:PutLogEvents\n            - logs:DescribeLogGroups\n            - logs:DescribeLogStreams\n          Resource: \"*\"\n\n        # DynamoDB Streams permissions\n        - Effect: Allow\n          Action:\n            - dynamodb:GetRecords\n            - dynamodb:GetShardIterator\n            - dynamodb:DescribeStream\n            - dynamodb:ListStreams\n          Resource:\n            Fn::GetAtt: [TasksTable, StreamArn]\n\n        # WebSocket Connections Table permissions\n        - Effect: Allow\n          Action:\n            - dynamodb:Query\n            - dynamodb:Scan\n            - dynamodb:GetItem\n            - dynamodb:PutItem\n            - dynamodb:UpdateItem\n            - dynamodb:DeleteItem\n          Resource:\n            - Fn::GetAtt: [WebSocketConnectionsTable, Arn]\n            - Fn::Sub: \"${WebSocketConnectionsTable.Arn}/index/*\"\n\n  # Environment variables for all functions\n  environment:\n    TASKS_TABLE: ${self:service}-${sls:stage}-table\n    TASKS_QUEUE_URL:\n      Ref: TasksQueue\n    CONNECTIONS_TABLE: ${self:service}-${sls:stage}-websocket-connections\n    WEBSOCKET_ENDPOINT:\n      Fn::Sub: \"wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}\"\n\n# Function definitions\nfunctions:\n  # API Gateway functions\n  api:\n    handler: functions/api/index.handler\n    events:\n      - httpApi:\n          path: /tasks\n          method: GET\n      - httpApi:\n          path: /tasks\n          method: POST\n\n  # Task processor function\n  taskProcessor:\n    handler: functions/taskProcessor/index.handler\n    events:\n      - sqs:\n          arn:\n            Fn::GetAtt: [TasksQueue, Arn]\n          batchSize: 1\n          maximumBatchingWindow: 0\n\n  # Stream processor function\n  streamProcessor:\n    handler: functions/streamProcessor/index.handler\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt: [TasksTable, StreamArn]\n          batchSize: 1\n          startingPosition: LATEST\n\n  # DLQ monitor function\n  dlqMonitor:\n    handler: functions/dlqMonitor/index.handler\n    events:\n      - schedule:\n          rate: rate(5 minutes)\n          enabled: true\n\n  # WebSocket handler function\n  websocketHandler:\n    handler: functions/websocketHandler/index.handler\n    events:\n      - websocket:\n          route: $connect\n      - websocket:\n          route: $disconnect\n      - websocket:\n          route: $default\n\n# AWS resources\nresources:\n  Resources:\n    # DynamoDB table for tasks\n    TasksTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        BillingMode: PAY_PER_REQUEST\n        TableName: ${self:service}-${sls:stage}-table\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n\n    # SQS queue for task processing\n    TasksQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:service}-${sls:stage}-queue\n        VisibilityTimeout: 30\n        MessageRetentionPeriod: 1209600\n        RedrivePolicy:\n          deadLetterTargetArn:\n            Fn::GetAtt: [TasksDeadLetterQueue, Arn]\n          maxReceiveCount: 3\n\n    # Dead letter queue for failed tasks\n    TasksDeadLetterQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${self:service}-${sls:stage}-dlq\n        MessageRetentionPeriod: 1209600\n\n    # WebSocket connections table\n    WebSocketConnectionsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:service}-${sls:stage}-websocket-connections\n        BillingMode: PAY_PER_REQUEST\n        AttributeDefinitions:\n          - AttributeName: connectionId\n            AttributeType: S\n          - AttributeName: status\n            AttributeType: S\n        KeySchema:\n          - AttributeName: connectionId\n            KeyType: HASH\n        GlobalSecondaryIndexes:\n          - IndexName: StatusIndex\n            KeySchema:\n              - AttributeName: status\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n\n    # WebSocket API\n    WebsocketsApi:\n      Type: AWS::ApiGatewayV2::Api\n      Properties:\n        Name: ${self:service}-${sls:stage}-ws\n        ProtocolType: WEBSOCKET\n        RouteSelectionExpression: $request.body.action\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "89b643ef-0e63-40f6-8b92-5e6cd7c189b4",
    "orgName": "andrewk5o",
    "userId": "xpqzC5Rwr5x9zmTG9W",
    "userName": "andrewk5o",
    "serviceProviderAwsAccountId": "085089485325",
    "serviceProviderAwsCfStackName": "task-processing-backend-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:eu-central-1:085089485325:stack/task-processing-backend-dev/96cd62d0-81bd-11f0-b664-0629abb837e5",
    "serviceProviderAwsCfStackCreated": "2025-08-25T14:12:52.877Z",
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": "CREATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "WebsocketHandlerLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:085089485325:function:task-processing-backend-dev-websocketHandler:6",
        "Description": "Current Lambda function version",
        "ExportName": "sls-task-processing-backend-dev-WebsocketHandlerLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "StreamProcessorLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:085089485325:function:task-processing-backend-dev-streamProcessor:6",
        "Description": "Current Lambda function version",
        "ExportName": "sls-task-processing-backend-dev-StreamProcessorLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ApiLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:085089485325:function:task-processing-backend-dev-api:6",
        "Description": "Current Lambda function version",
        "ExportName": "sls-task-processing-backend-dev-ApiLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "kdkjdo94yk",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-task-processing-backend-dev-HttpApiId"
      },
      {
        "OutputKey": "DlqMonitorLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:085089485325:function:task-processing-backend-dev-dlqMonitor:6",
        "Description": "Current Lambda function version",
        "ExportName": "sls-task-processing-backend-dev-DlqMonitorLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpointWebsocket",
        "OutputValue": "wss://qoypeivwk2.execute-api.eu-central-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-task-processing-backend-dev-ServiceEndpointWebsocket"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-eu-central-1-54517477-9e0a",
        "ExportName": "sls-task-processing-backend-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "TaskProcessorLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:085089485325:function:task-processing-backend-dev-taskProcessor:6",
        "Description": "Current Lambda function version",
        "ExportName": "sls-task-processing-backend-dev-TaskProcessorLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://kdkjdo94yk.execute-api.eu-central-1.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-task-processing-backend-dev-HttpApiUrl"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "ApiLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/task-processing-backend-dev-api"
          }
        },
        "TaskProcessorLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/task-processing-backend-dev-taskProcessor"
          }
        },
        "StreamProcessorLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/task-processing-backend-dev-streamProcessor"
          }
        },
        "DlqMonitorLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/task-processing-backend-dev-dlqMonitor"
          }
        },
        "WebsocketHandlerLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/task-processing-backend-dev-websocketHandler"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "task-processing-backend",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/task-processing-backend-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/task-processing-backend-dev*:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:Query",
                        "dynamodb:Scan",
                        "dynamodb:GetItem",
                        "dynamodb:PutItem",
                        "dynamodb:UpdateItem",
                        "dynamodb:DeleteItem"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "TasksTable",
                            "Arn"
                          ]
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "sqs:SendMessage",
                        "sqs:GetQueueAttributes",
                        "sqs:GetQueueUrl",
                        "sqs:ReceiveMessage",
                        "sqs:DeleteMessage",
                        "sqs:ChangeMessageVisibility"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "TasksQueue",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "TasksDeadLetterQueue",
                            "Arn"
                          ]
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents",
                        "logs:DescribeLogGroups",
                        "logs:DescribeLogStreams"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:GetRecords",
                        "dynamodb:GetShardIterator",
                        "dynamodb:DescribeStream",
                        "dynamodb:ListStreams"
                      ],
                      "Resource": {
                        "Fn::GetAtt": [
                          "TasksTable",
                          "StreamArn"
                        ]
                      }
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:Query",
                        "dynamodb:Scan",
                        "dynamodb:GetItem",
                        "dynamodb:PutItem",
                        "dynamodb:UpdateItem",
                        "dynamodb:DeleteItem"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "WebSocketConnectionsTable",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::Sub": "${WebSocketConnectionsTable.Arn}/index/*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "execute-api:ManageConnections"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:GetRecords",
                        "dynamodb:GetShardIterator",
                        "dynamodb:DescribeStream",
                        "dynamodb:ListStreams"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "TasksTable",
                            "StreamArn"
                          ]
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "sqs:ReceiveMessage",
                        "sqs:DeleteMessage",
                        "sqs:GetQueueAttributes"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "TasksQueue",
                            "Arn"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "task-processing-backend",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "ApiLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-central-1-54517477-9e0a",
              "S3Key": "serverless/task-processing-backend/dev/1756131165037-2025-08-25T14:12:45.037Z/task-processing-backend.zip"
            },
            "Handler": "functions/api/index.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "task-processing-backend-dev-api",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "TASKS_TABLE": "task-processing-backend-dev-table",
                "TASKS_QUEUE_URL": {
                  "Ref": "TasksQueue"
                },
                "CONNECTIONS_TABLE": "task-processing-backend-dev-websocket-connections",
                "WEBSOCKET_ENDPOINT": {
                  "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
                }
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ApiLogGroup"
          ]
        },
        "TaskProcessorLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-central-1-54517477-9e0a",
              "S3Key": "serverless/task-processing-backend/dev/1756131165037-2025-08-25T14:12:45.037Z/task-processing-backend.zip"
            },
            "Handler": "functions/taskProcessor/index.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "task-processing-backend-dev-taskProcessor",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "TASKS_TABLE": "task-processing-backend-dev-table",
                "TASKS_QUEUE_URL": {
                  "Ref": "TasksQueue"
                },
                "CONNECTIONS_TABLE": "task-processing-backend-dev-websocket-connections",
                "WEBSOCKET_ENDPOINT": {
                  "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
                }
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "TaskProcessorLogGroup"
          ]
        },
        "StreamProcessorLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-central-1-54517477-9e0a",
              "S3Key": "serverless/task-processing-backend/dev/1756131165037-2025-08-25T14:12:45.037Z/task-processing-backend.zip"
            },
            "Handler": "functions/streamProcessor/index.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "task-processing-backend-dev-streamProcessor",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "TASKS_TABLE": "task-processing-backend-dev-table",
                "TASKS_QUEUE_URL": {
                  "Ref": "TasksQueue"
                },
                "CONNECTIONS_TABLE": "task-processing-backend-dev-websocket-connections",
                "WEBSOCKET_ENDPOINT": {
                  "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
                }
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "StreamProcessorLogGroup"
          ]
        },
        "DlqMonitorLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-central-1-54517477-9e0a",
              "S3Key": "serverless/task-processing-backend/dev/1756131165037-2025-08-25T14:12:45.037Z/task-processing-backend.zip"
            },
            "Handler": "functions/dlqMonitor/index.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "task-processing-backend-dev-dlqMonitor",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "TASKS_TABLE": "task-processing-backend-dev-table",
                "TASKS_QUEUE_URL": {
                  "Ref": "TasksQueue"
                },
                "CONNECTIONS_TABLE": "task-processing-backend-dev-websocket-connections",
                "WEBSOCKET_ENDPOINT": {
                  "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
                }
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "DlqMonitorLogGroup"
          ]
        },
        "WebsocketHandlerLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-central-1-54517477-9e0a",
              "S3Key": "serverless/task-processing-backend/dev/1756131165037-2025-08-25T14:12:45.037Z/task-processing-backend.zip"
            },
            "Handler": "functions/websocketHandler/index.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "task-processing-backend-dev-websocketHandler",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "TASKS_TABLE": "task-processing-backend-dev-table",
                "TASKS_QUEUE_URL": {
                  "Ref": "TasksQueue"
                },
                "CONNECTIONS_TABLE": "task-processing-backend-dev-websocket-connections",
                "WEBSOCKET_ENDPOINT": {
                  "Fn::Sub": "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
                }
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "WebsocketHandlerLogGroup"
          ]
        },
        "ApiLambdaVersionvAL4CUTgK5WMuJOYimYYffc0Wrrhx6SCZgjuHM2PI": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ApiLambdaFunction"
            },
            "CodeSha256": "nYbnxZ5XhOrFlxXt899RmRr+9c6xOgSxdG/QGWzEBjY="
          }
        },
        "TaskProcessorLambdaVersion57aqbaoJGKIAluMs0UgIx30M45uftoyE5uEDdxtezo": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "TaskProcessorLambdaFunction"
            },
            "CodeSha256": "nYbnxZ5XhOrFlxXt899RmRr+9c6xOgSxdG/QGWzEBjY="
          }
        },
        "StreamProcessorLambdaVersion4exsM7tfitUdndi1JGGbSVvBY9AXP1RlIMmShrI": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "StreamProcessorLambdaFunction"
            },
            "CodeSha256": "nYbnxZ5XhOrFlxXt899RmRr+9c6xOgSxdG/QGWzEBjY="
          }
        },
        "DlqMonitorLambdaVersion2pMo5ROhFjxeGAD7S2q97bNneV7gSea5WPXX8CX6OI": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "DlqMonitorLambdaFunction"
            },
            "CodeSha256": "nYbnxZ5XhOrFlxXt899RmRr+9c6xOgSxdG/QGWzEBjY="
          }
        },
        "WebsocketHandlerLambdaVersionw8lTRE9coOj0jFzNl118uelhgFHFoVt3iRj0Hq1DE": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "WebsocketHandlerLambdaFunction"
            },
            "CodeSha256": "nYbnxZ5XhOrFlxXt899RmRr+9c6xOgSxdG/QGWzEBjY="
          }
        },
        "DlqMonitorEventsRuleSchedule1": {
          "Type": "AWS::Events::Rule",
          "Properties": {
            "ScheduleExpression": "rate(5 minutes)",
            "State": "ENABLED",
            "Targets": [
              {
                "Arn": {
                  "Fn::GetAtt": [
                    "DlqMonitorLambdaFunction",
                    "Arn"
                  ]
                },
                "Id": "dlqMonitorSchedule"
              }
            ]
          }
        },
        "DlqMonitorLambdaPermissionEventsRuleSchedule1": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "DlqMonitorLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "events.amazonaws.com",
            "SourceArn": {
              "Fn::GetAtt": [
                "DlqMonitorEventsRuleSchedule1",
                "Arn"
              ]
            }
          }
        },
        "WebsocketsApi": {
          "Type": "AWS::ApiGatewayV2::Api",
          "Properties": {
            "Name": "task-processing-backend-dev-ws",
            "RouteSelectionExpression": "$request.body.action",
            "Description": "Serverless Websockets",
            "ProtocolType": "WEBSOCKET"
          }
        },
        "WebsocketHandlerWebsocketsIntegration": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "WebsocketsApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":apigateway:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":lambda:path/2015-03-31/functions/",
                  {
                    "Fn::GetAtt": [
                      "WebsocketHandlerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "/invocations"
                ]
              ]
            }
          }
        },
        "WebsocketHandlerLambdaPermissionWebsockets": {
          "Type": "AWS::Lambda::Permission",
          "DependsOn": [
            "WebsocketsApi",
            "WebsocketHandlerLambdaFunction"
          ],
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "WebsocketHandlerLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com"
          }
        },
        "SconnectWebsocketsRoute": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "WebsocketsApi"
            },
            "RouteKey": "$connect",
            "AuthorizationType": "NONE",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "WebsocketHandlerWebsocketsIntegration"
                  }
                ]
              ]
            }
          }
        },
        "SdisconnectWebsocketsRoute": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "WebsocketsApi"
            },
            "RouteKey": "$disconnect",
            "AuthorizationType": "NONE",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "WebsocketHandlerWebsocketsIntegration"
                  }
                ]
              ]
            }
          }
        },
        "SdefaultWebsocketsRoute": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "WebsocketsApi"
            },
            "RouteKey": "$default",
            "AuthorizationType": "NONE",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "WebsocketHandlerWebsocketsIntegration"
                  }
                ]
              ]
            }
          }
        },
        "WebsocketsDeploymentStage": {
          "Type": "AWS::ApiGatewayV2::Stage",
          "Properties": {
            "ApiId": {
              "Ref": "WebsocketsApi"
            },
            "StageName": "dev",
            "Description": "Serverless Websockets",
            "DeploymentId": {
              "Ref": "WebsocketsDeploymentkaylU7JZbCSkwN8TzDYnLVjBMDEGWIRfNx9IKpIRvc"
            }
          }
        },
        "WebsocketsDeploymentkaylU7JZbCSkwN8TzDYnLVjBMDEGWIRfNx9IKpIRvc": {
          "Type": "AWS::ApiGatewayV2::Deployment",
          "DependsOn": [
            "SconnectWebsocketsRoute",
            "SdisconnectWebsocketsRoute",
            "SdefaultWebsocketsRoute"
          ],
          "Properties": {
            "ApiId": {
              "Ref": "WebsocketsApi"
            },
            "Description": "Serverless Websockets"
          }
        },
        "StreamProcessorEventSourceMappingDynamodbTasksTable": {
          "Type": "AWS::Lambda::EventSourceMapping",
          "DependsOn": [
            "IamRoleLambdaExecution"
          ],
          "Properties": {
            "BatchSize": 1,
            "Enabled": true,
            "EventSourceArn": {
              "Fn::GetAtt": [
                "TasksTable",
                "StreamArn"
              ]
            },
            "FunctionName": {
              "Fn::GetAtt": [
                "StreamProcessorLambdaFunction",
                "Arn"
              ]
            },
            "StartingPosition": "LATEST"
          }
        },
        "TaskProcessorEventSourceMappingSQSTasksQueue": {
          "Type": "AWS::Lambda::EventSourceMapping",
          "DependsOn": [
            "IamRoleLambdaExecution"
          ],
          "Properties": {
            "BatchSize": 1,
            "MaximumBatchingWindowInSeconds": 0,
            "EventSourceArn": {
              "Fn::GetAtt": [
                "TasksQueue",
                "Arn"
              ]
            },
            "FunctionName": {
              "Fn::GetAtt": [
                "TaskProcessorLambdaFunction",
                "Arn"
              ]
            },
            "Enabled": true
          }
        },
        "HttpApi": {
          "Type": "AWS::ApiGatewayV2::Api",
          "Properties": {
            "Name": "dev-task-processing-backend",
            "ProtocolType": "HTTP",
            "CorsConfiguration": {
              "AllowHeaders": [
                "Content-Type",
                "X-Amz-Date",
                "Authorization",
                "X-Api-Key",
                "X-Amz-Security-Token"
              ],
              "AllowMethods": [
                "GET",
                "POST",
                "OPTIONS"
              ],
              "AllowOrigins": [
                "http://localhost:4200"
              ]
            }
          }
        },
        "HttpApiStage": {
          "Type": "AWS::ApiGatewayV2::Stage",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "StageName": "$default",
            "AutoDeploy": true,
            "DefaultRouteSettings": {
              "DetailedMetricsEnabled": false
            }
          }
        },
        "ApiLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ApiLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationApi": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ApiLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetTasks": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /tasks",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationApi"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationApi"
        },
        "HttpApiRoutePostTasks": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /tasks",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationApi"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationApi"
        },
        "TasksTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "BillingMode": "PAY_PER_REQUEST",
            "TableName": "task-processing-backend-dev-table",
            "StreamSpecification": {
              "StreamViewType": "NEW_AND_OLD_IMAGES"
            },
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ]
          }
        },
        "TasksQueue": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "task-processing-backend-dev-queue",
            "VisibilityTimeout": 30,
            "MessageRetentionPeriod": 1209600,
            "RedrivePolicy": {
              "deadLetterTargetArn": {
                "Fn::GetAtt": [
                  "TasksDeadLetterQueue",
                  "Arn"
                ]
              },
              "maxReceiveCount": 3
            }
          }
        },
        "TasksDeadLetterQueue": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "task-processing-backend-dev-dlq",
            "MessageRetentionPeriod": 1209600
          }
        },
        "WebSocketConnectionsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "task-processing-backend-dev-websocket-connections",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "connectionId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "status",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "connectionId",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "StatusIndex",
                "KeySchema": [
                  {
                    "AttributeName": "status",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-eu-central-1-54517477-9e0a",
          "Export": {
            "Name": "sls-task-processing-backend-dev-ServerlessDeploymentBucketName"
          }
        },
        "ApiLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ApiLambdaVersionvAL4CUTgK5WMuJOYimYYffc0Wrrhx6SCZgjuHM2PI"
          },
          "Export": {
            "Name": "sls-task-processing-backend-dev-ApiLambdaFunctionQualifiedArn"
          }
        },
        "TaskProcessorLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "TaskProcessorLambdaVersion57aqbaoJGKIAluMs0UgIx30M45uftoyE5uEDdxtezo"
          },
          "Export": {
            "Name": "sls-task-processing-backend-dev-TaskProcessorLambdaFunctionQualifiedArn"
          }
        },
        "StreamProcessorLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "StreamProcessorLambdaVersion4exsM7tfitUdndi1JGGbSVvBY9AXP1RlIMmShrI"
          },
          "Export": {
            "Name": "sls-task-processing-backend-dev-StreamProcessorLambdaFunctionQualifiedArn"
          }
        },
        "DlqMonitorLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "DlqMonitorLambdaVersion2pMo5ROhFjxeGAD7S2q97bNneV7gSea5WPXX8CX6OI"
          },
          "Export": {
            "Name": "sls-task-processing-backend-dev-DlqMonitorLambdaFunctionQualifiedArn"
          }
        },
        "WebsocketHandlerLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "WebsocketHandlerLambdaVersionw8lTRE9coOj0jFzNl118uelhgFHFoVt3iRj0Hq1DE"
          },
          "Export": {
            "Name": "sls-task-processing-backend-dev-WebsocketHandlerLambdaFunctionQualifiedArn"
          }
        },
        "ServiceEndpointWebsocket": {
          "Description": "URL of the service endpoint",
          "Value": {
            "Fn::Join": [
              "",
              [
                "wss://",
                {
                  "Ref": "WebsocketsApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/dev"
              ]
            ]
          },
          "Export": {
            "Name": "sls-task-processing-backend-dev-ServiceEndpointWebsocket"
          }
        },
        "HttpApiId": {
          "Description": "Id of the HTTP API",
          "Value": {
            "Ref": "HttpApi"
          },
          "Export": {
            "Name": "sls-task-processing-backend-dev-HttpApiId"
          }
        },
        "HttpApiUrl": {
          "Description": "URL of the HTTP API",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "HttpApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                }
              ]
            ]
          },
          "Export": {
            "Name": "sls-task-processing-backend-dev-HttpApiUrl"
          }
        }
      }
    }
  }
}