# Backend Serverless Framework configuration for task-processing service
org: andrewk5o
app: task-processing
service: task-processing-backend

# Stage-specific configuration
provider:
  name: aws
  runtime: nodejs20.x
  region: eu-central-1

  httpApi:
    cors:
      allowedOrigins:
        - http://localhost:4200
        - http://task-processing-frontend-dev.s3-website.eu-central-1.amazonaws.com
      allowedHeaders:
        - Content-Type
        - X-Amz-Date
        - Authorization
        - X-Api-Key
        - X-Amz-Security-Token
      allowedMethods:
        - GET
        - POST
        - OPTIONS
      allowCredentials: false

  # IAM permissions for the service
  iam:
    role:
      statements:
        # DynamoDB permissions
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [TasksTable, Arn]

        # SQS permissions for main queue and DLQ
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:GetQueueAttributes
            - sqs:GetQueueUrl
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:ChangeMessageVisibility
          Resource:
            - Fn::GetAtt: [TasksQueue, Arn]
            - Fn::GetAtt: [TasksDeadLetterQueue, Arn]

        # CloudWatch Logs permissions for DLQ monitoring
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
          Resource: "*"

        # DynamoDB Streams permissions
        - Effect: Allow
          Action:
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:DescribeStream
            - dynamodb:ListStreams
          Resource:
            Fn::GetAtt: [TasksTable, StreamArn]

        # WebSocket Connections Table permissions
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [WebSocketConnectionsTable, Arn]
            - Fn::Sub: "${WebSocketConnectionsTable.Arn}/index/*"

  # Environment variables for all functions
  environment:
    TASKS_TABLE: ${self:service}-${sls:stage}-table
    TASKS_QUEUE_URL:
      Ref: TasksQueue
    TASKS_DLQ_URL:
      Ref: TasksDeadLetterQueue
    CONNECTIONS_TABLE: ${self:service}-${sls:stage}-websocket-connections
    WEBSOCKET_ENDPOINT:
      Fn::Sub: "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}"

# Function definitions
functions:
  # API Gateway functions
  api:
    handler: functions/api/index.handler
    events:
      - httpApi:
          path: /tasks
          method: GET
      - httpApi:
          path: /tasks
          method: POST

  # Task processor function
  taskProcessor:
    handler: functions/taskProcessor/index.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: [TasksQueue, Arn]
          batchSize: 1
          maximumBatchingWindow: 0

  # Stream processor function
  streamProcessor:
    handler: functions/streamProcessor/index.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [TasksTable, StreamArn]
          batchSize: 1
          startingPosition: LATEST

  # DLQ monitor function
  dlqMonitor:
    handler: functions/dlqMonitor/index.handler
    events:
      - schedule:
          rate: rate(5 minutes)
          enabled: true

  # WebSocket handler function
  websocketHandler:
    handler: functions/websocketHandler/index.handler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default

# AWS resources
resources:
  Resources:
    # DynamoDB table for tasks
    TasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:service}-${sls:stage}-table
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: taskId
            AttributeType: S
        KeySchema:
          - AttributeName: taskId
            KeyType: HASH

    # SQS queue for task processing
    TasksQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${sls:stage}-queue
        VisibilityTimeout: 30
        MessageRetentionPeriod: 1209600
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt: [TasksDeadLetterQueue, Arn]
          maxReceiveCount: 3

    # Dead letter queue for failed tasks
    TasksDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${sls:stage}-dlq
        MessageRetentionPeriod: 1209600

    # WebSocket connections table
    WebSocketConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}-websocket-connections
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: status
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: StatusIndex
            KeySchema:
              - AttributeName: status
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # WebSocket API
    WebsocketsApi:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: ${self:service}-${sls:stage}-ws
        ProtocolType: WEBSOCKET
        RouteSelectionExpression: $request.body.action
