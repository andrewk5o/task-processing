{
  "version": 3,
  "sources": ["../../../../../../node_modules/@ngxs/websocket-plugin/fesm2022/ngxs-websocket-plugin.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { InjectionToken, inject, NgZone, DestroyRef, Injectable, APP_INITIALIZER, NgModule, makeEnvironmentProviders } from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { Store, Actions, ofActionDispatched } from '@ngxs/store';\nimport { getValue } from '@ngxs/store/plugins';\nimport { Subject, fromEvent, takeUntil } from 'rxjs';\nconst NGXS_WEBSOCKET_OPTIONS = new InjectionToken(typeof ngDevMode !== 'undefined' && ngDevMode ? 'NGXS_WEBSOCKET_OPTIONS' : '');\nconst USER_OPTIONS = new InjectionToken(typeof ngDevMode !== 'undefined' && ngDevMode ? 'USER_OPTIONS' : '');\n/**\n * Action to connect to the websocket. Optionally pass a URL.\n */\nclass ConnectWebSocket {\n  payload;\n  static type = '[WebSocket] Connect';\n  constructor(payload) {\n    this.payload = payload;\n  }\n}\n/**\n * Action triggered when a error ocurrs\n */\nclass WebSocketMessageError {\n  payload;\n  static type = '[WebSocket] Message Error';\n  constructor(payload) {\n    this.payload = payload;\n  }\n}\n/**\n * Action to disconnect the websocket.\n */\nclass DisconnectWebSocket {\n  static type = '[WebSocket] Disconnect';\n}\n/**\n * Action triggered when websocket is connected\n */\nclass WebSocketConnected {\n  static type = '[WebSocket] Connected';\n}\n/**\n * Action triggered when websocket is disconnected\n */\nclass WebSocketDisconnected {\n  static type = '[WebSocket] Disconnected';\n}\n/**\n * Action to send to the server.\n */\nclass SendWebSocketMessage {\n  payload;\n  static type = '[WebSocket] Send Message';\n  constructor(payload) {\n    this.payload = payload;\n  }\n}\n/**\n * Action dispatched when the user tries to connect if the connection already exists.\n */\nclass WebSocketConnectionUpdated {\n  static type = '[WebSocket] Connection Updated';\n}\n/**\n * This error is thrown where there is no `type` (or custom `typeKey`) property\n * on the message that came from the server side socket\n */\nclass TypeKeyPropertyMissingError extends Error {\n  constructor(typeKey) {\n    super(`Property ${typeKey} is missing on the socket message`);\n  }\n}\nclass WebSocketHandler {\n  _store = inject(Store);\n  _ngZone = inject(NgZone);\n  _actions$ = inject(Actions);\n  _options = inject(NGXS_WEBSOCKET_OPTIONS);\n  _socket = null;\n  _socketClosed$ = new Subject();\n  _typeKey = this._options.typeKey;\n  _destroyRef = inject(DestroyRef);\n  constructor() {\n    this._setupActionsListeners();\n    this._destroyRef.onDestroy(() => this._closeConnection(/* forcelyCloseSocket */true));\n  }\n  _setupActionsListeners() {\n    this._actions$.pipe(ofActionDispatched(ConnectWebSocket), takeUntilDestroyed(this._destroyRef)).subscribe(({\n      payload\n    }) => {\n      this.connect(payload);\n    });\n    this._actions$.pipe(ofActionDispatched(DisconnectWebSocket), takeUntilDestroyed(this._destroyRef)).subscribe(() => {\n      this._disconnect(/* forcelyCloseSocket */true);\n    });\n    this._actions$.pipe(ofActionDispatched(SendWebSocketMessage), takeUntilDestroyed(this._destroyRef)).subscribe(({\n      payload\n    }) => {\n      this.send(payload);\n    });\n  }\n  connect(options) {\n    if (this._socket) {\n      this._closeConnection(/* forcelyCloseSocket */true);\n      this._store.dispatch(new WebSocketConnectionUpdated());\n    }\n    // TODO(arturovt): we should not override default config values because this breaks support for having multiple socket connections.\n    if (options) {\n      if (options.serializer) {\n        this._options.serializer = options.serializer;\n      }\n      if (options.deserializer) {\n        this._options.deserializer = options.deserializer;\n      }\n    }\n    this._ngZone.runOutsideAngular(() => {\n      // We either use options provided in the `ConnectWebSocket` action\n      // or fallback to default config values.\n      const url = options?.url || this._options.url;\n      const protocol = options?.protocol || this._options.protocol;\n      const binaryType = options?.binaryType || this._options.binaryType;\n      const socket = this._socket = protocol ? new WebSocket(url, protocol) : new WebSocket(url);\n      if (binaryType) {\n        socket.binaryType = binaryType;\n      }\n      fromEvent(socket, 'open').pipe(takeUntil(this._socketClosed$)).subscribe(() => this._store.dispatch(new WebSocketConnected()));\n      fromEvent(socket, 'message').pipe(takeUntil(this._socketClosed$)).subscribe(event => {\n        const message = this._options.deserializer(event);\n        const type = getValue(message, this._typeKey);\n        if (!type) {\n          throw new TypeKeyPropertyMissingError(this._typeKey);\n        }\n        this._store.dispatch({\n          ...message,\n          type\n        });\n      });\n      fromEvent(socket, 'error').pipe(takeUntil(this._socketClosed$)).subscribe(error => {\n        // The error event indicates that an error has occurred during the\n        // WebSocket communication, and it is often appropriate to close the\n        // WebSocket connection when such an error occurs.\n        // We need to call `_disconnect()` after the error event has been fired.\n        // This ensures that the WebSocket connection is properly closed to prevent\n        // potential resource leaks.\n        this._disconnect(/* forcelyCloseSocket */true);\n        this._store.dispatch(new WebSocketMessageError(error));\n      });\n      fromEvent(socket, 'close').pipe(takeUntil(this._socketClosed$)).subscribe(event => {\n        if (event.wasClean) {\n          // It is not necessary to call `socket.close()` after the `close` event\n          // has been fired. In fact, calling `socket.close()` within the `close`\n          // event handler or immediately after the event has been fired can lead\n          // to unexpected behavior.\n          this._disconnect(/* forcelyCloseSocket */false);\n        } else {\n          // If the WebSocket `close` event has been fired and its `wasClean`\n          // property is falsy, it indicates that the WebSocket connection was\n          // closed in an unexpected or abnormal manner.\n          // We should call `socket.close()` in this scenario, we can ensure that\n          // the WebSocket connection is properly closed.\n          this._disconnect(/* forcelyCloseSocket */true);\n          this._store.dispatch(new WebSocketMessageError(event));\n        }\n      });\n    });\n  }\n  _disconnect(forcelyCloseSocket) {\n    if (this._socket) {\n      this._closeConnection(forcelyCloseSocket);\n      this._store.dispatch(new WebSocketDisconnected());\n    }\n  }\n  send(data) {\n    if (!this._socket) {\n      throw new Error('You must connect to the socket before sending any data');\n    }\n    try {\n      this._socket.send(this._options.serializer(data));\n    } catch (error) {\n      this._store.dispatch(new WebSocketMessageError(error));\n    }\n  }\n  _closeConnection(forcelyCloseSocket) {\n    if (forcelyCloseSocket) {\n      this._socket?.close();\n    }\n    this._socket = null;\n    this._socketClosed$.next();\n  }\n  /** @nocollapse */\n  static ɵfac = function WebSocketHandler_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || WebSocketHandler)();\n  };\n  /** @nocollapse */\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: WebSocketHandler,\n    factory: WebSocketHandler.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(WebSocketHandler, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [], null);\n})();\nfunction ɵwebsocketOptionsFactory(options) {\n  return {\n    reconnectInterval: 5000,\n    reconnectAttempts: 10,\n    typeKey: 'type',\n    deserializer(e) {\n      return JSON.parse(e.data);\n    },\n    serializer(value) {\n      return JSON.stringify(value);\n    },\n    ...options\n  };\n}\nfunction ɵgetProviders(options) {\n  return [{\n    provide: USER_OPTIONS,\n    useValue: options\n  }, {\n    provide: NGXS_WEBSOCKET_OPTIONS,\n    useFactory: ɵwebsocketOptionsFactory,\n    deps: [USER_OPTIONS]\n  }, {\n    provide: APP_INITIALIZER,\n    useFactory: () => () => {},\n    deps: [WebSocketHandler],\n    multi: true\n  }];\n}\nclass NgxsWebSocketPluginModule {\n  static forRoot(options) {\n    return {\n      ngModule: NgxsWebSocketPluginModule,\n      providers: ɵgetProviders(options)\n    };\n  }\n  /** @nocollapse */\n  static ɵfac = function NgxsWebSocketPluginModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || NgxsWebSocketPluginModule)();\n  };\n  /** @nocollapse */\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxsWebSocketPluginModule\n  });\n  /** @nocollapse */\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxsWebSocketPluginModule, [{\n    type: NgModule\n  }], null, null);\n})();\nfunction withNgxsWebSocketPlugin(options) {\n  return makeEnvironmentProviders(ɵgetProviders(options));\n}\n\n/**\n * The public api for consumers of @ngxs/websocket-plugin\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ConnectWebSocket, DisconnectWebSocket, NgxsWebSocketPluginModule, SendWebSocketMessage, WebSocketConnected, WebSocketConnectionUpdated, WebSocketDisconnected, WebSocketMessageError, withNgxsWebSocketPlugin, NGXS_WEBSOCKET_OPTIONS as ɵNGXS_WEBSOCKET_OPTIONS };\n"],
  "mappings": "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",
  "names": []
}
