import * as i0 from '@angular/core';
import { ModuleWithProviders, EnvironmentProviders, InjectionToken } from '@angular/core';

declare const NGXS_WEBSOCKET_OPTIONS: InjectionToken<NgxsWebSocketPluginOptions>;
interface NgxsWebSocketPluginOptions {
    /**
     * URL of the websocket.
     */
    url?: string;
    /**
     * Either a single protocol string or an array of protocol strings.
     * These strings are used to indicate sub-protocols, so that a single server
     * can implement multiple WebSocket sub-protocols (for example, you might want one server to be able
     * to handle different types of interactions depending on the specified protocol).
     * If you don't specify a protocol string, an empty string is assumed.
     */
    protocol?: string | string[];
    /**
     * Sets the `binaryType` property of the underlying WebSocket.
     */
    binaryType?: 'blob' | 'arraybuffer';
    /**
     * The property name to distigunish this type for the store.
     * Default: 'type'
     */
    typeKey?: string;
    /**
     * Interval to try and reconnect.
     * Default: 5000
     */
    reconnectInterval?: number;
    /**
     * Number of reconnect attemps.
     * Default: 10
     */
    reconnectAttempts?: number;
    /**
     * Serializer to call before sending messages
     * Default: `json.stringify`
     */
    serializer?: (data: any) => string;
    /**
     * Deseralizer before publishing the message.
     */
    deserializer?: (e: MessageEvent) => any;
}
/**
 * Action to connect to the websocket. Optionally pass a URL.
 */
declare class ConnectWebSocket {
    payload?: NgxsWebSocketPluginOptions | undefined;
    static readonly type = "[WebSocket] Connect";
    constructor(payload?: NgxsWebSocketPluginOptions | undefined);
}
/**
 * Action triggered when a error ocurrs
 */
declare class WebSocketMessageError {
    payload: any;
    static readonly type = "[WebSocket] Message Error";
    constructor(payload: any);
}
/**
 * Action to disconnect the websocket.
 */
declare class DisconnectWebSocket {
    static readonly type = "[WebSocket] Disconnect";
}
/**
 * Action triggered when websocket is connected
 */
declare class WebSocketConnected {
    static readonly type = "[WebSocket] Connected";
}
/**
 * Action triggered when websocket is disconnected
 */
declare class WebSocketDisconnected {
    static readonly type = "[WebSocket] Disconnected";
}
/**
 * Action to send to the server.
 */
declare class SendWebSocketMessage {
    payload: any;
    static readonly type = "[WebSocket] Send Message";
    constructor(payload: any);
}
/**
 * Action dispatched when the user tries to connect if the connection already exists.
 */
declare class WebSocketConnectionUpdated {
    static readonly type = "[WebSocket] Connection Updated";
}

declare class NgxsWebSocketPluginModule {
    static forRoot(options?: NgxsWebSocketPluginOptions): ModuleWithProviders<NgxsWebSocketPluginModule>;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxsWebSocketPluginModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<NgxsWebSocketPluginModule, never, never, never>;
    static ɵinj: i0.ɵɵInjectorDeclaration<NgxsWebSocketPluginModule>;
}
declare function withNgxsWebSocketPlugin(options?: NgxsWebSocketPluginOptions): EnvironmentProviders;

export { ConnectWebSocket, DisconnectWebSocket, NgxsWebSocketPluginModule, SendWebSocketMessage, WebSocketConnected, WebSocketConnectionUpdated, WebSocketDisconnected, WebSocketMessageError, withNgxsWebSocketPlugin, NGXS_WEBSOCKET_OPTIONS as ɵNGXS_WEBSOCKET_OPTIONS };
