{"version":3,"file":"ngxs-websocket-plugin.mjs","sources":["../../../packages/websocket-plugin/src/symbols.ts","../../../packages/websocket-plugin/src/websocket-handler.ts","../../../packages/websocket-plugin/src/providers.ts","../../../packages/websocket-plugin/src/websocket.module.ts","../../../packages/websocket-plugin/index.ts","../../../packages/websocket-plugin/ngxs-websocket-plugin.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\ndeclare const ngDevMode: boolean;\n\nexport const NGXS_WEBSOCKET_OPTIONS = new InjectionToken<NgxsWebSocketPluginOptions>(\n  typeof ngDevMode !== 'undefined' && ngDevMode ? 'NGXS_WEBSOCKET_OPTIONS' : ''\n);\n\nexport const USER_OPTIONS = new InjectionToken(\n  typeof ngDevMode !== 'undefined' && ngDevMode ? 'USER_OPTIONS' : ''\n);\n\nexport interface NgxsWebSocketPluginOptions {\n  /**\n   * URL of the websocket.\n   */\n  url?: string;\n\n  /**\n   * Either a single protocol string or an array of protocol strings.\n   * These strings are used to indicate sub-protocols, so that a single server\n   * can implement multiple WebSocket sub-protocols (for example, you might want one server to be able\n   * to handle different types of interactions depending on the specified protocol).\n   * If you don't specify a protocol string, an empty string is assumed.\n   */\n  protocol?: string | string[];\n\n  /**\n   * Sets the `binaryType` property of the underlying WebSocket.\n   */\n  binaryType?: 'blob' | 'arraybuffer';\n\n  /**\n   * The property name to distigunish this type for the store.\n   * Default: 'type'\n   */\n  typeKey?: string;\n\n  /**\n   * Interval to try and reconnect.\n   * Default: 5000\n   */\n  reconnectInterval?: number;\n\n  /**\n   * Number of reconnect attemps.\n   * Default: 10\n   */\n  reconnectAttempts?: number;\n\n  /**\n   * Serializer to call before sending messages\n   * Default: `json.stringify`\n   */\n  serializer?: (data: any) => string;\n\n  /**\n   * Deseralizer before publishing the message.\n   */\n  deserializer?: (e: MessageEvent) => any;\n}\n\n/**\n * Action to connect to the websocket. Optionally pass a URL.\n */\nexport class ConnectWebSocket {\n  static readonly type = '[WebSocket] Connect';\n\n  constructor(public payload?: NgxsWebSocketPluginOptions) {}\n}\n\n/**\n * Action triggered when a error ocurrs\n */\nexport class WebSocketMessageError {\n  static readonly type = '[WebSocket] Message Error';\n\n  constructor(public payload: any) {}\n}\n\n/**\n * Action to disconnect the websocket.\n */\nexport class DisconnectWebSocket {\n  static readonly type = '[WebSocket] Disconnect';\n}\n\n/**\n * Action triggered when websocket is connected\n */\nexport class WebSocketConnected {\n  static readonly type = '[WebSocket] Connected';\n}\n\n/**\n * Action triggered when websocket is disconnected\n */\nexport class WebSocketDisconnected {\n  static readonly type = '[WebSocket] Disconnected';\n}\n\n/**\n * Action to send to the server.\n */\nexport class SendWebSocketMessage {\n  static readonly type = '[WebSocket] Send Message';\n\n  constructor(public payload: any) {}\n}\n\n/**\n * Action dispatched when the user tries to connect if the connection already exists.\n */\nexport class WebSocketConnectionUpdated {\n  static readonly type = '[WebSocket] Connection Updated';\n}\n\n/**\n * This error is thrown where there is no `type` (or custom `typeKey`) property\n * on the message that came from the server side socket\n */\nexport class TypeKeyPropertyMissingError extends Error {\n  constructor(typeKey: string) {\n    super(`Property ${typeKey} is missing on the socket message`);\n  }\n}\n","import { Injectable, NgZone, inject, DestroyRef } from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { Actions, Store, ofActionDispatched } from '@ngxs/store';\nimport { getValue } from '@ngxs/store/plugins';\nimport { Subject, fromEvent, takeUntil } from 'rxjs';\n\nimport {\n  ConnectWebSocket,\n  DisconnectWebSocket,\n  SendWebSocketMessage,\n  NGXS_WEBSOCKET_OPTIONS,\n  NgxsWebSocketPluginOptions,\n  WebSocketMessageError,\n  WebSocketDisconnected,\n  TypeKeyPropertyMissingError,\n  WebSocketConnectionUpdated,\n  WebSocketConnected\n} from './symbols';\n\n@Injectable({ providedIn: 'root' })\nexport class WebSocketHandler {\n  private _store = inject(Store);\n  private _ngZone = inject(NgZone);\n  private _actions$ = inject(Actions);\n  private _options = inject(NGXS_WEBSOCKET_OPTIONS);\n\n  private _socket: WebSocket | null = null;\n\n  private readonly _socketClosed$ = new Subject<void>();\n\n  private readonly _typeKey = this._options.typeKey!;\n\n  private readonly _destroyRef = inject(DestroyRef);\n\n  constructor() {\n    this._setupActionsListeners();\n\n    this._destroyRef.onDestroy(() => this._closeConnection(/* forcelyCloseSocket */ true));\n  }\n\n  private _setupActionsListeners(): void {\n    this._actions$\n      .pipe(ofActionDispatched(ConnectWebSocket), takeUntilDestroyed(this._destroyRef))\n      .subscribe(({ payload }) => {\n        this.connect(payload);\n      });\n\n    this._actions$\n      .pipe(ofActionDispatched(DisconnectWebSocket), takeUntilDestroyed(this._destroyRef))\n      .subscribe(() => {\n        this._disconnect(/* forcelyCloseSocket */ true);\n      });\n\n    this._actions$\n      .pipe(ofActionDispatched(SendWebSocketMessage), takeUntilDestroyed(this._destroyRef))\n      .subscribe(({ payload }) => {\n        this.send(payload);\n      });\n  }\n\n  private connect(options?: NgxsWebSocketPluginOptions): void {\n    if (this._socket) {\n      this._closeConnection(/* forcelyCloseSocket */ true);\n      this._store.dispatch(new WebSocketConnectionUpdated());\n    }\n\n    // TODO(arturovt): we should not override default config values because this breaks support for having multiple socket connections.\n    if (options) {\n      if (options.serializer) {\n        this._options.serializer = options.serializer;\n      }\n\n      if (options.deserializer) {\n        this._options.deserializer = options.deserializer;\n      }\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      // We either use options provided in the `ConnectWebSocket` action\n      // or fallback to default config values.\n      const url = options?.url || this._options.url!;\n      const protocol = options?.protocol || this._options.protocol;\n      const binaryType = options?.binaryType || this._options.binaryType;\n\n      const socket = (this._socket = protocol\n        ? new WebSocket(url, protocol)\n        : new WebSocket(url));\n\n      if (binaryType) {\n        socket.binaryType = binaryType;\n      }\n\n      fromEvent(socket, 'open')\n        .pipe(takeUntil(this._socketClosed$))\n        .subscribe(() => this._store.dispatch(new WebSocketConnected()));\n\n      fromEvent<MessageEvent>(socket, 'message')\n        .pipe(takeUntil(this._socketClosed$))\n        .subscribe(event => {\n          const message = this._options.deserializer!(event);\n          const type = getValue(message, this._typeKey);\n          if (!type) {\n            throw new TypeKeyPropertyMissingError(this._typeKey);\n          }\n          this._store.dispatch({ ...message, type });\n        });\n\n      fromEvent(socket, 'error')\n        .pipe(takeUntil(this._socketClosed$))\n        .subscribe(error => {\n          // The error event indicates that an error has occurred during the\n          // WebSocket communication, and it is often appropriate to close the\n          // WebSocket connection when such an error occurs.\n          // We need to call `_disconnect()` after the error event has been fired.\n          // This ensures that the WebSocket connection is properly closed to prevent\n          // potential resource leaks.\n          this._disconnect(/* forcelyCloseSocket */ true);\n          this._store.dispatch(new WebSocketMessageError(error));\n        });\n\n      fromEvent<CloseEvent>(socket, 'close')\n        .pipe(takeUntil(this._socketClosed$))\n        .subscribe(event => {\n          if (event.wasClean) {\n            // It is not necessary to call `socket.close()` after the `close` event\n            // has been fired. In fact, calling `socket.close()` within the `close`\n            // event handler or immediately after the event has been fired can lead\n            // to unexpected behavior.\n            this._disconnect(/* forcelyCloseSocket */ false);\n          } else {\n            // If the WebSocket `close` event has been fired and its `wasClean`\n            // property is falsy, it indicates that the WebSocket connection was\n            // closed in an unexpected or abnormal manner.\n            // We should call `socket.close()` in this scenario, we can ensure that\n            // the WebSocket connection is properly closed.\n            this._disconnect(/* forcelyCloseSocket */ true);\n            this._store.dispatch(new WebSocketMessageError(event));\n          }\n        });\n    });\n  }\n\n  private _disconnect(forcelyCloseSocket: boolean): void {\n    if (this._socket) {\n      this._closeConnection(forcelyCloseSocket);\n      this._store.dispatch(new WebSocketDisconnected());\n    }\n  }\n\n  private send(data: any): void {\n    if (!this._socket) {\n      throw new Error('You must connect to the socket before sending any data');\n    }\n\n    try {\n      this._socket.send(this._options.serializer!(data));\n    } catch (error) {\n      this._store.dispatch(new WebSocketMessageError(error));\n    }\n  }\n\n  private _closeConnection(forcelyCloseSocket: boolean): void {\n    if (forcelyCloseSocket) {\n      this._socket?.close();\n    }\n    this._socket = null;\n    this._socketClosed$.next();\n  }\n}\n","import { APP_INITIALIZER } from '@angular/core';\n\nimport { WebSocketHandler } from './websocket-handler';\nimport { USER_OPTIONS, NGXS_WEBSOCKET_OPTIONS, NgxsWebSocketPluginOptions } from './symbols';\n\nexport function ÉµwebsocketOptionsFactory(options: NgxsWebSocketPluginOptions) {\n  return {\n    reconnectInterval: 5000,\n    reconnectAttempts: 10,\n    typeKey: 'type',\n    deserializer(e: MessageEvent) {\n      return JSON.parse(e.data);\n    },\n    serializer(value: any) {\n      return JSON.stringify(value);\n    },\n    ...options\n  };\n}\n\nexport function ÉµgetProviders(options?: NgxsWebSocketPluginOptions) {\n  return [\n    { provide: USER_OPTIONS, useValue: options },\n    {\n      provide: NGXS_WEBSOCKET_OPTIONS,\n      useFactory: ÉµwebsocketOptionsFactory,\n      deps: [USER_OPTIONS]\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: () => () => {},\n      deps: [WebSocketHandler],\n      multi: true\n    }\n  ];\n}\n","import {\n  NgModule,\n  ModuleWithProviders,\n  EnvironmentProviders,\n  makeEnvironmentProviders\n} from '@angular/core';\n\nimport { ÉµgetProviders } from './providers';\nimport { NgxsWebSocketPluginOptions } from './symbols';\n\n@NgModule()\nexport class NgxsWebSocketPluginModule {\n  static forRoot(\n    options?: NgxsWebSocketPluginOptions\n  ): ModuleWithProviders<NgxsWebSocketPluginModule> {\n    return {\n      ngModule: NgxsWebSocketPluginModule,\n      providers: ÉµgetProviders(options)\n    };\n  }\n}\n\nexport function withNgxsWebSocketPlugin(\n  options?: NgxsWebSocketPluginOptions\n): EnvironmentProviders {\n  return makeEnvironmentProviders(ÉµgetProviders(options));\n}\n","/**\n * The public api for consumers of @ngxs/websocket-plugin\n */\nexport * from './src/public_api';\n\n/**\n * The private api for consumers of @ngxs/websocket-plugin\n */\nexport * from './src/private_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}