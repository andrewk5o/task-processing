# Serverless Framework configuration for task-processing service
org: andrewk5o
app: task-processing
service: task-processing

stages:
  default:
    params:
      tableName: "tasks-table-${sls:stage}"
      queueName: "tasks-queue-${sls:stage}"

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-central-1

  # IAM permissions for the service
  iam:
    role:
      statements:
        # DynamoDB permissions
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [TasksTable, Arn]

        # SQS permissions for main queue and DLQ
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:GetQueueAttributes
            - sqs:GetQueueUrl
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:ChangeMessageVisibility
          Resource:
            - Fn::GetAtt: [TasksQueue, Arn]
            - Fn::GetAtt: [TasksDeadLetterQueue, Arn]

        # CloudWatch Logs permissions for DLQ monitoring
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
          Resource: "*"

        # DynamoDB Streams permissions
        - Effect: Allow
          Action:
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:DescribeStream
            - dynamodb:ListStreams
          Resource:
            Fn::GetAtt: [TasksTable, StreamArn]

        # WebSocket Connections Table permissions
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [WebSocketConnectionsTable, Arn]
            - Fn::Sub: "${WebSocketConnectionsTable.Arn}/index/*"

  # Environment variables for all functions
  environment:
    TASKS_TABLE: ${param:tableName}
    TASKS_QUEUE_URL:
      Ref: TasksQueue
    CONNECTIONS_TABLE: ${self:service}-${sls:stage}-websocket-connections
    WEBSOCKET_ENDPOINT:
      Fn::Sub: "https://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}"

# Function definitions
functions:
  # API Gateway functions
  api:
    handler: functions/api/index.handler
    events:
      - httpApi:
          path: /tasks
          method: GET
      - httpApi:
          path: /tasks
          method: POST
    environment:
      TASKS_TABLE: ${param:tableName}
      TASKS_QUEUE_URL:
        Ref: TasksQueue

  # Task processing function
  taskProcessor:
    handler: functions/taskProcessor/index.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: [TasksQueue, Arn]
          batchSize: 1
    environment:
      TASKS_TABLE: ${param:tableName}
      TASKS_QUEUE_URL:
        Ref: TasksQueue
      TASKS_DLQ_URL:
        Ref: TasksDeadLetterQueue

  # DLQ monitoring function
  dlqMonitor:
    handler: functions/dlqMonitor/index.handler
    events:
      - schedule:
          rate: rate(5 minutes)
          enabled: true
    environment:
      TASKS_TABLE: ${param:tableName}
      TASKS_DLQ_URL:
        Ref: TasksDeadLetterQueue

  streamProcessor:
    handler: functions/streamProcessor/index.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [TasksTable, StreamArn]
          batchSize: 1
          startingPosition: LATEST

  websocketHandler:
    handler: functions/websocketHandler/index.handler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default

# AWS resources
resources:
  Resources:
    # Dead Letter Queue for failed tasks (must be created first)
    TasksDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "${param:queueName}-dlq"
        MessageRetentionPeriod: 345600
        VisibilityTimeout: 30

    # Main SQS queue for incoming tasks
    TasksQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${param:queueName}
        VisibilityTimeout: 30
        MessageRetentionPeriod: 1209600
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt: [TasksDeadLetterQueue, Arn]
          maxReceiveCount: 3

    # DynamoDB table for storing tasks
    TasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: taskId
            AttributeType: S
        KeySchema:
          - AttributeName: taskId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:tableName}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    WebSocketConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}-websocket-connections
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: status
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: StatusIndex
            KeySchema:
              - AttributeName: status
                KeyType: HASH
            Projection:
              ProjectionType: ALL
WebsocketsApi:
  Type: AWS::ApiGatewayV2::Api
  Properties:
    Name: ${self:service}-${sls:stage}-ws
    ProtocolType: WEBSOCKET
    RouteSelectionExpression: $request.body.action
