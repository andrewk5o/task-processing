# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: andrewk5o
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: task-processing
# "service" is the name of this project. This will also be added to your AWS resource names.
service: task-processing

stages:
  default:
    params:
      tableName: "tasks-table-${sls:stage}"
      queueName: "tasks-queue-${sls:stage}"

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-central-1
  # Uncomment to easily set up a custom domain. Read the docs for more details:
  # https://www.serverless.com/framework/docs/providers/aws/guide/domains
  # domain: api.example.com
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [TasksTable, Arn]
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:GetQueueAttributes
            - sqs:GetQueueUrl
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:ChangeMessageVisibility
          Resource:
            - Fn::GetAtt: [TasksQueue, Arn]
            # - Fn::GetAtt: [TasksDeadLetterQueue, Arn]
  environment:
    TASKS_TABLE: ${param:tableName}
    TASKS_QUEUE_URL:
      Ref: TasksQueue
    TASKS_QUEUE_NAME: ${param:queueName}

functions:
  api:
    handler: functions/api/index.handler
    events:
      - httpApi:
          path: /tasks
          method: GET
      - httpApi:
          path: /tasks/{taskId}
          method: GET
      - httpApi:
          path: /tasks
          method: POST

  taskProcessor:
    handler: functions/taskProcessor/index.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: [TasksQueue, Arn]
          batchSize: 1
    environment:
      TASKS_TABLE: ${param:tableName}
      TASKS_QUEUE_URL:
        Ref: TasksQueue
      TASKS_QUEUE_NAME: ${param:queueName}

  # dlqMonitor:
  #   handler: functions/dlqMonitor/index.handler
  #   events:
  #     - schedule:
  #         rate: rate(5 minutes)
  #         enabled: true
  #   environment:
  #     TASKS_TABLE: ${param:tableName}
  #     DLQ_URL:
  #       Ref: TasksDeadLetterQueue

resources:
  Resources:
    TasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: taskId
            AttributeType: S
        KeySchema:
          - AttributeName: taskId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:tableName}

    TasksQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${param:queueName}
        VisibilityTimeout: 30
        MessageRetentionPeriod: 1209600
        # RedrivePolicy:
        #   deadLetterTargetArn:
        #     Fn::GetAtt: [TasksDeadLetterQueue, Arn]
        #   maxReceiveCount: 3

    # TasksDeadLetterQueue:
    #   Type: AWS::SQS::Queue
    #   Properties:
    #     QueueName: "${param:queueName}-dlq"
    #     MessageRetentionPeriod: 1209600
